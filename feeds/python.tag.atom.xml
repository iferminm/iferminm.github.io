<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/dev/isra/blog/* - python</title><link href="//iffm.me/" rel="alternate"></link><link href="//127.0.0.1:8000/feeds/python.tag.atom.xml" rel="self"></link><id>//iffm.me/</id><updated>2020-04-01T00:00:00+04:00</updated><entry><title>Working with databases easier</title><link href="//iffm.me/working-with-databases-easier.html" rel="alternate"></link><published>2020-04-01T00:00:00+04:00</published><updated>2020-04-01T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2020-04-01:/working-with-databases-easier.html</id><summary type="html">&lt;p&gt;This will be a short article, recently at work I had to build few reports on
top of two legacy databases, to be honest, the whole architecture and the way
the data is stored, in my opinion, is not optimal, a lot of things need to change
but, as usual …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This will be a short article, recently at work I had to build few reports on
top of two legacy databases, to be honest, the whole architecture and the way
the data is stored, in my opinion, is not optimal, a lot of things need to change
but, as usual, features and business take precedence over tech debt.&lt;/p&gt;
&lt;p&gt;The whole stack is based on nodejs on top of typescript, which makes a bit more
enjoyable the fact that I'm now working in JavaScript. All the databases were
generated using knexjs so, these databases were there already and I only had to
connect to them.&lt;/p&gt;
&lt;p&gt;I didn't want to spend too much time on the connection and mapping part, so
I wanted to see if an ORM would be of use here&lt;/p&gt;
&lt;h2&gt;The overall idea&lt;/h2&gt;
&lt;p&gt;Since we will be integrating with other internal tools to generate these reports
the implementation I came up with is temporary, so I wanted to make as few changes
as possible in the current codebase for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Once you add something temporary, it will be difficult to clean it up
after it's not needed anymore, the chances of someone building on top of it 
is high.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I don't like working with typescript, or JavaScript in general so if I could
get away with writing in some other language it could be more fun&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The current application is a monolith and the logic is complex,
adding more would take longer than implementing something from scratch&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I decided to implement the report generating logic in a Lambda function
which will be executed periodically, this meant I had to setup the connections
to the databases from scratch and map to my domain classes and types in order
to have a clean architecture.&lt;/p&gt;
&lt;h2&gt;Enter Sqlalchemy&lt;/h2&gt;
&lt;p&gt;Sqlalchemy is the database Swiss army knife in python, it makes it very
easy to work with databases by mapping tables to domain classes, but it also
works the other way around by introspecting the database's schema metadata and
generating stub classes to deal with them in Python.&lt;/p&gt;
&lt;h3&gt;Automap&lt;/h3&gt;
&lt;p&gt;Sqlalchemy has an Automap extension, which lets you connect to an existing database
and generate a domain model from the existing database schema and operate with it
from Python, trigger queries and use Sqlalchemy normally as if the schema was generated
by you.&lt;/p&gt;
&lt;p&gt;It's very easy and it doesn't take 30 lines of code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.automap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;automap_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;


&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;automap_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can access the classes with the table name as it is in the database let's say you have a
&lt;code&gt;user_profile&lt;/code&gt; database, then you can access it as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trigger queries as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;UserProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_profile&lt;/span&gt;

&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;123123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you're good to go.&lt;/p&gt;
&lt;p&gt;Of course, code conventions in SQL and Python are different, if you want your code to look more pythonic
and have &lt;code&gt;Base.classes.*&lt;/code&gt; to be in PascalCase as well, you can write a function to override the table naming
when the automap is performed, it will add few lines but still below 20 lines in general&lt;/p&gt;
&lt;p&gt;It looks something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;snake_to_pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, that assumes your tables are named as &lt;code&gt;this_is_a_table&lt;/code&gt; and will be converted to &lt;code&gt;ThisIsATable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use that function when you call &lt;code&gt;Base.prepare&lt;/code&gt; as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname_for_table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;snake_to_pascal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it. :-)&lt;/p&gt;</content><category term="Blog"></category><category term="python"></category><category term="databases"></category><category term="sqlalchemy"></category><category term="orm"></category></entry><entry><title>Django registration in no time!</title><link href="//iffm.me/django-registration-in-no-time.html" rel="alternate"></link><published>2018-01-23T00:00:00+04:00</published><updated>2018-01-23T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2018-01-23:/django-registration-in-no-time.html</id><summary type="html">&lt;p&gt;What does 99% of the projects we work on have in common?, what's usually the first or the last
thing we start working on when building something, a personal project perhaps?. If you said
&lt;em&gt;dealing with users&lt;/em&gt;, that's right. On each and every project we find ourselves writing different
registration …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What does 99% of the projects we work on have in common?, what's usually the first or the last
thing we start working on when building something, a personal project perhaps?. If you said
&lt;em&gt;dealing with users&lt;/em&gt;, that's right. On each and every project we find ourselves writing different
registration or authentication flows, sometimes we use third party authentication services like
&lt;em&gt;Google&lt;/em&gt; or &lt;em&gt;facebook&lt;/em&gt; via their &lt;em&gt;API&lt;/em&gt;s, but most of the times I'd say we start by asking our user's
to register using their &lt;code&gt;email&lt;/code&gt; and a &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Common approaches&lt;/h2&gt;
&lt;p&gt;There are several approaches to user registration, we can do it on a single step, or we can do it on
2 steps with a confirmation email being sent to the given address. There are several ways you can structure
your registration flow, either two simple questions (&lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;) or multiple questions through
several pages, you name it, we always write user registration flows.&lt;/p&gt;
&lt;p&gt;Is you ask me, I've always preferred to write a simple one, ask for an &lt;code&gt;email&lt;/code&gt; and a &lt;code&gt;password&lt;/code&gt; and ask for the
rest of the information I need on a separate &lt;em&gt;User Profile&lt;/em&gt; page, things like name, date of birth, country, city,
mobile number or other stuff I might need. But you want as least friction as possible on the registration process,
specially if you're trying to get your first users, that's why I don't even send confirmation emails when I just launched
something. I start asking for confirmation when I already got some users and I have people constantly signing up, otherwise,
it's not worth the effort or the network traffic, plus the complexity of sending it asynchronously with a message queue.&lt;/p&gt;
&lt;p&gt;That's why I thought of writing a reusable django app to solve this, I was working on it for a while, taking the good parts
of all the registration flows I've written, until I found &lt;code&gt;django-registration&lt;/code&gt; and just switched to that library.&lt;/p&gt;
&lt;h2&gt;Enter django-registration&lt;/h2&gt;
&lt;p&gt;This is way better that anything I could have written myself, it's being used by many people, has an active maintainer, works
out of the box and supports single and two steps registration flows so, why &lt;em&gt;reinventing the wheel&lt;/em&gt; if it's already there?,
I'm using it for a couple of personal projects I'll be in the upcoming months (or not... you know...) and it's
incredible how easy it makes it to implement user registration, allowing me to start working on actual features and functionality
in almost no time.&lt;/p&gt;
&lt;p&gt;Let's get started&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;To install it, you just need to &lt;code&gt;pip&lt;/code&gt; it as any usual &lt;em&gt;Python&lt;/em&gt; module&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pip install django-registration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the simple &lt;em&gt;one step&lt;/em&gt; registration flow or the &lt;em&gt;HMAC Based&lt;/em&gt; workflow, you don't need to do anything else.&lt;/p&gt;
&lt;h3&gt;Registration workflows&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;django-registration&lt;/em&gt;, supports three different workflows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One step:&lt;/strong&gt; this workflow consists of as few steps as possible, the user signs up by filling the registration form,
after submitting, the account is created without any intermediate verification and the user is logged in automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HMAC Based:&lt;/strong&gt; it's a two steps registration workflow that doesn't store any verification key, it sends instead a
timestamped HMAC verified value to the user via email in order to verify the account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model based:&lt;/strong&gt; to use this workflow, you'll have to add &lt;code&gt;registration&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt; as you will need
to install one model to perform the verification step. If you need a two steps account creation because you require email
verification, the recommended way is to use the &lt;em&gt;HMAC&lt;/em&gt; flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic &lt;em&gt;one step&lt;/em&gt; registration flow is the easiest way to register new users, if you're just deploying something for fun
and it's intended mostly for your personal use but want to allow other people to use it, I don't think you need to verify
email and go through all that hassle unless you get serious about it, so in my case, the intended user for my project is just myself,
but if someone else wants to use it, I'm OK with that, I assume if you want to use something you'll just provide a legit email
because it's on your own interest.&lt;/p&gt;
&lt;h3&gt;Settings everything up&lt;/h3&gt;
&lt;p&gt;I decided to go for a &lt;em&gt;one step&lt;/em&gt; flow, as I don't really care if anyone provides an nonexistent email, I'm the one who will mostly
be using this, so, I guess it's OK, &lt;em&gt;django-registration&lt;/em&gt; allows me to restrict new accounts from being created just by adding 
&lt;code&gt;REGISTRATION_OPEN = False&lt;/code&gt; on my &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Each registration flow comes with its own set of views and urls and you'll have to create your custom template and form if you needed,
you'll most probably end up customizing some behavior, but it's really easy to do, most of the core, boring and repetitive work
of creating the registration workflow is done for you and works out of the box.&lt;/p&gt;
&lt;p&gt;In this case, for the &lt;em&gt;one step&lt;/em&gt; all I had to do was the following:&lt;/p&gt;
&lt;p&gt;1.- Include &lt;code&gt;registration.backends.simple.urls&lt;/code&gt; in my urls configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# Some url patterns&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;registration.backends.simple.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;# More url patterns&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.- Set &lt;code&gt;REGISTRATION_OPEN = True&lt;/code&gt;, this is the default value, but &lt;em&gt;better explicit than implicit&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;3.- By default, after successful registration the user will be redirected to &lt;code&gt;/&lt;/code&gt;, but you can customize this behavior by
subclassing &lt;code&gt;registration.backends.simple.views.RegistrationView&lt;/code&gt; and overriding the method &lt;code&gt;get_success_url()&lt;/code&gt;, in my case,
redirecting to &lt;code&gt;/&lt;/code&gt; is fine.&lt;/p&gt;
&lt;p&gt;4.- By default, &lt;em&gt;django-registration&lt;/em&gt; will use &lt;code&gt;registration.forms.RegistrationForm&lt;/code&gt;, this can be overridden by supplying your
own &lt;code&gt;form_class&lt;/code&gt; argument when adding the default &lt;code&gt;RegistationView&lt;/code&gt; to the &lt;code&gt;urlpatterns&lt;/code&gt; or by subclassing it and setting the &lt;code&gt;form_class&lt;/code&gt;
attribute or implementing &lt;code&gt;get_form_class()&lt;/code&gt;. In my case, I opted for passing an argument to the &lt;code&gt;as_view()&lt;/code&gt; method when addind the
corresponding &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;registration.backends.simple.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RegistrationView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserRegistrationForm&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# Some url patterns&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accounts/register/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RegistrationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UserRegistrationForm&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;registration.backends.simple.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;# More url patterns&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.- Customize the registration template, this flow only needs one template called &lt;code&gt;registration/registration_form.html&lt;/code&gt; and it will
pick it up automatically, the &lt;code&gt;RegistrationView&lt;/code&gt; will add the &lt;code&gt;form&lt;/code&gt; variable to the &lt;code&gt;context&lt;/code&gt; and it will contain a &lt;code&gt;RegistrationForm&lt;/code&gt; instance,
all for free.&lt;/p&gt;
&lt;h2&gt;Recommended readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://django-registration.readthedocs.io/en/2.4.1/index.html"&gt;&lt;em&gt;django registration&lt;/em&gt; docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django docs on &lt;a href="https://docs.djangoproject.com/en/2.0/topics/class-based-views/"&gt;class based views&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="python"></category><category term="django"></category><category term="tutorial"></category><category term="registration"></category></entry><entry><title>Making django scale Pt.2</title><link href="//iffm.me/making-django-scale-pt2.html" rel="alternate"></link><published>2017-12-24T00:00:00+04:00</published><updated>2017-12-24T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2017-12-24:/making-django-scale-pt2.html</id><summary type="html">&lt;p&gt;It's been a while since the &lt;a href="/making-django-scale-pt1.html"&gt;first post&lt;/a&gt; about scaling web applications using &lt;em&gt;django&lt;/em&gt;, last time we
spoke about some basic concepts about scalability, buzz words we hear everyday and we also use but
always struggle when we need to give a formal definition to someone.&lt;/p&gt;
&lt;p&gt;Once we have clear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been a while since the &lt;a href="/making-django-scale-pt1.html"&gt;first post&lt;/a&gt; about scaling web applications using &lt;em&gt;django&lt;/em&gt;, last time we
spoke about some basic concepts about scalability, buzz words we hear everyday and we also use but
always struggle when we need to give a formal definition to someone.&lt;/p&gt;
&lt;p&gt;Once we have clear basic concepts about scalability, performance and we are familiar with the Pareto
Principle, we are ready to start optimizing and improving our system's performance, right?. Not so fast
cowboy!, if you remember the Pareto Principle most of the negative performance impact is coming for 20%
of the negative impacters. We need to manage somehow to solve that 20% so we are sure we are making a
significant improvement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You can't manage what you don't measure&lt;/em&gt; - Peter Ducker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means, we need to gain visibility inside our system to be able to detect those bottlenecks and 
work on solving or easing them. For that, we will need a set of tools to monitor and profile our
application.&lt;/p&gt;
&lt;h2&gt;The tools&lt;/h2&gt;
&lt;p&gt;There are a lot of monitoring tools for Linux and for &lt;em&gt;django&lt;/em&gt; out there, you can use the ones you like
the most, but I'm going to showcase some here as a starting point. I'm not going to go deep into how to
install them and set them up or customize them because it's out of the scope of this post, but I might
post some individual howtos later, here I'll just point you to the corresponding documentation.&lt;/p&gt;
&lt;h3&gt;django debug toolbar&lt;/h3&gt;
&lt;p&gt;This is my all time favorite, it's a pip-installable module for &lt;em&gt;django&lt;/em&gt; and you'll need to add some
settings variables and a template tag and you're done.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image of django-debug-toolbar" src="https://dl.dropboxusercontent.com/s/bykbb9iryv1m6io/django_debug_toolbar.png"&gt;&lt;/p&gt;
&lt;p&gt;As you can see on the screenshot it will give you a lot of relevant information about what happened under
the hood to serve that request, it will tell you the missed cache hits, which static files and templates
are being served, the current request headers and request parameters but my favorite feature is the SQL viewer,
it will show you the queries that ran on that view, with a timeline and their run time so you get to see
which ones are taking long time and take action, it gives you also the option to see an &lt;code&gt;EXPLAIN&lt;/code&gt; of the query
to check what the query planner did.&lt;/p&gt;
&lt;p&gt;To install it and use it, you can refer to the &lt;a href="https://django-debug-toolbar.readthedocs.io/en/stable/"&gt;official docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;vprof&lt;/h3&gt;
&lt;p&gt;This is a visual profiler for &lt;em&gt;Python&lt;/em&gt;, although it isn't made for &lt;em&gt;django&lt;/em&gt;, you can plug it in and take advantage
of all the cool graphs it will draw for you out of the box.&lt;/p&gt;
&lt;p&gt;A profiler will measure how your code is behaving and tell you where the hot points are as well as your call
stack, vprof will give you an insight also on how much memory your program is consuming so it's easier to detect
memory leaks.&lt;/p&gt;
&lt;p&gt;Here are some of the graphs &lt;em&gt;vprof&lt;/em&gt; will produce for you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flame diagram to allow you see your function call stack
&lt;img alt="*vprof* flame diagram" src="https://dl.dropboxusercontent.com/s/lvi3sxxhgmjccax/vprof_flame_diagram.png"&gt;&lt;/li&gt;
&lt;li&gt;Memory profiler
&lt;img alt="*vprof* memory profiler" src="https://dl.dropboxusercontent.com/s/zv1o87ebms7humr/vprof_mem_profiler.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To set it up you can refer to the &lt;a href="https://github.com/nvdv/vprof"&gt;official docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;CProfile&lt;/h3&gt;
&lt;p&gt;Setting up &lt;em&gt;vprof&lt;/em&gt; for &lt;em&gt;django&lt;/em&gt; might be tricky depending of your application architecture and setup, &lt;em&gt;CProfile&lt;/em&gt; is
pretty much the defacto standard on &lt;em&gt;Python&lt;/em&gt; profilers, it will produce an output on an standard format you can plug into
any profiling reporting tool such as &lt;em&gt;SnakeViz&lt;/em&gt; to produce cool graphs that will help you understand what's going on.&lt;/p&gt;
&lt;p&gt;You can easily set it up in &lt;em&gt;django&lt;/em&gt; by using &lt;em&gt;&lt;a href="https://github.com/omarish/django-cprofile-middleware"&gt;django-cprofile-middleware&lt;/a&gt;&lt;/em&gt; 
this app will also add one endpoint any
&lt;em&gt;staff&lt;/em&gt; user can hit to get data about the performance and, also, &lt;em&gt;CProfile&lt;/em&gt; can produce an output file you can
pipe into &lt;em&gt;&lt;a href="http://jiffyclub.github.io/snakeviz/"&gt;SnakeViz&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is how &lt;em&gt;SnakeViz&lt;/em&gt; graphs would look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="*SnakeViz* list view" src="https://dl.dropboxusercontent.com/s/0uxf12rxx562t6z/snake_list_view.png"&gt;
&lt;img alt="*SnakeViz* sunburst diagram" src="https://dl.dropboxusercontent.com/s/hx9cfdxvn1dqq4o/snake_sun_diagram.png"&gt;&lt;/p&gt;
&lt;h3&gt;StatsD&lt;/h3&gt;
&lt;p&gt;This is an external stats collecting system built by &lt;em&gt;Etsy&lt;/em&gt;, they &lt;a href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/"&gt;blogged&lt;/a&gt;
about it and how it works and it's also &lt;a href="https://github.com/etsy/statsd"&gt;open source&lt;/a&gt;, you can set it up in &lt;em&gt;django&lt;/em&gt; through a third
party app called &lt;a href="http://django-statsd.readthedocs.io/en/latest/"&gt;django-statsd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using this is a bit manual, you will need to send out your stats the same way you use log statements to add entries
with messages about what your system is going. In this case what StatsD will do is keep a log on counts and timing
of the events you are sending stats about.&lt;/p&gt;
&lt;p&gt;The coolest thing about &lt;em&gt;StatsD&lt;/em&gt; is that you can set it up to periodically flush data to &lt;a href="http://graphiteapp.org/"&gt;&lt;em&gt;Graphite&lt;/em&gt;&lt;/a&gt;
where you can then produce this kind of graphs on top of &lt;em&gt;StatsD&lt;/em&gt;'s data&lt;/p&gt;
&lt;p&gt;&lt;img alt="*Graphite* dashboard" src="https://dl.dropboxusercontent.com/s/mns9m1htvqvxr5k/graphite.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Use the logging subsystem&lt;/h3&gt;
&lt;p&gt;Logging can save you a lot of time if you do it right, it can also clutter your code with &lt;code&gt;logger.info()&lt;/code&gt; statements everywhere
if you over do it, you need to log everything so you know what your app is doing at each step of the different processes it performs,
but log even more on the critical ones.&lt;/p&gt;
&lt;p&gt;These log files need to go somewhere, maybe you're familiar with &lt;a href="https://syslog-ng.org/"&gt;syslog&lt;/a&gt; to concentrate your logs in a single server so you
have only one place to go when you need to do some text-processing-fu with &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;, but as your system grows
and also the amount of different loggers storing messages, it will get trickier and trickier to keep track of every action across
all the different modules of your system, an &lt;em&gt;ELK&lt;/em&gt; system can help you to ease the search through your log files and also generate
reports and graphs on top of your log data using &lt;em&gt;Kibana&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can read more about the &lt;em&gt;ELK&lt;/em&gt; or &lt;em&gt;Elastic&lt;/em&gt; stack &lt;a href="https://www.elastic.co/webinars/introduction-elk-stack"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;newrelic&lt;/h3&gt;
&lt;p&gt;If you have some budget to invest on this, &lt;a href="http://newrelic.com"&gt;&lt;em&gt;newrelic&lt;/em&gt;&lt;/a&gt; will give you most of these features
out of the box just by installing and setting up their &lt;em&gt;Python&lt;/em&gt; tracker, it will start pushing data to &lt;em&gt;newrelic&lt;/em&gt; and
you can see your system's performance in real time, it will show you data such as the average response time as well as
response time in percentiles, average throughput, average error rate, error data and even transaction data like the one
you get from &lt;em&gt;django-debug-toolbar&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;newrelic&lt;/em&gt;'s main dashboard
&lt;img alt="*newrelic* main dashboard" src="https://dl.dropboxusercontent.com/s/zs0m9ozgktnhl1n/newrelic_main.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transactions dashboard
&lt;img alt="*newrelic* transactions dashboard" src="https://dl.dropboxusercontent.com/s/vuxlqnexow0srj8/newrelic_transactions.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Errors dashboard
&lt;img alt="*newrelic* errors dashboard" src="https://dl.dropboxusercontent.com/s/iw0zhoum8hv60xw/newrelic_errors.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have the budget, &lt;em&gt;newrelic&lt;/em&gt; is a &lt;em&gt;no-brainer&lt;/em&gt; it will be a valuable tool for you and your team and save you
a lot of time when you need to debug a live issue.&lt;/p&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;Before you even think of optimizing anything, you need to measure, there is no point in blindly going through the
code and, for example, indexing fields in your models if you don't know the impact of that, if any at all. The tools
mentioned here are not a definitive guide to profiling &lt;em&gt;django&lt;/em&gt; applications but they provide a nice starting point
to begging playing with them and choosing which ones work for you and which ones doesn't so you can improve your
tool belt, your stack and the quality of the products you're building.&lt;/p&gt;
&lt;p&gt;Monitoring and measuring shouldn't be an optional thing, it should be there if not since day one, at least added within
the first months of life of your project, that's the only way you get to see inside your application, detect bottlenecks
and potential bugs, debug them, measure their impact, prioritize them and be sure that by rolling out the optimizations
you will have an improvement of ~X percent in your performance.&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category><category term="django"></category><category term="scaling"></category></entry><entry><title>Making django scale Pt.1</title><link href="//iffm.me/making-django-scale-pt1.html" rel="alternate"></link><published>2017-09-24T00:00:00+04:00</published><updated>2017-09-24T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2017-09-24:/making-django-scale-pt1.html</id><summary type="html">&lt;p&gt;I gave a talk on PyConPL this year about scaling django, obviously on a 35min talk you don't have enough
time to outline all the strategies and go deeper, so I thought it might be a cool idea to write a series
of blog posts  about this topic, not only …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I gave a talk on PyConPL this year about scaling django, obviously on a 35min talk you don't have enough
time to outline all the strategies and go deeper, so I thought it might be a cool idea to write a series
of blog posts  about this topic, not only to help someone who needs to optimize his django app, but also
to help myself have it for future reference.&lt;/p&gt;
&lt;p&gt;There are a lot of django apps out there, in most cases the default setup and basic deployment strategy
would be fine, and your application will perform OK, but in some cases you will need to make it scale
to serve thousands or millions of requests per day. There's no recipe for optimization or scalability,
but there are a lot of technology or stack agnostic strategies you can use to make your systems scale
well, here I'll show how to implement them with django.&lt;/p&gt;
&lt;h2&gt;Basic concepts&lt;/h2&gt;
&lt;p&gt;First things first, we need to have clear and solid concepts in mind, we use these words on a daily basis
if we're Software Engineers but when we need to say what they mean we sometimes struggle, so, I'll write
them down here for future reference.&lt;/p&gt;
&lt;h3&gt;Scalability&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Scalability is the capability of a system or process to handle a growing amount of work or its potential
to be enlarged to accommodate it
- Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this means is the amount of work processed by a system must grow in proportion to how much it is enlarged,
for example, if I have a cashier at a bank, and that cashier is able to serve 10 people per minute, if I add one
more cashier to my system, it should be able to serve rightly 20 people per minute depending on the training of
the other cashier and some other conditions. Luckily, servers are more homogenize than people's abilities, 
for servers or applications, if I have a service that handles 1000 requests per minute, if I add another 
instance of the same service I should be able to handle 2000 requests per minute.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Computer performance&lt;/em&gt; is the amount of work accomplished by a computer system.
- Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You usually want to measure performance by some metric, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Response time:&lt;/em&gt; which you want to minimize&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Throughput:&lt;/em&gt; throughput is the rate of processing work, this one you want to maximize&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Resource utilization:&lt;/em&gt; which you want to minimize, you want to accomplish more with less&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Availability:&lt;/em&gt; you want to maximize your uptime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The performance metrics are relative to the type of system you're building, for web applications
you usually go for low response time and high throughput.&lt;/p&gt;
&lt;h3&gt;Pareto principle&lt;/h3&gt;
&lt;p&gt;This isn't actually a concept, but it is incredible how things always turn out like this. The Pareto
principle states what follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For many events, roughly 80% of the effects come from 20% of the causes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, 80% of the work will be done in 20% of the time, the other 80% will be spent on small issues
or small tangential work not directly related to the main objective. 80% of the bugs is caused by 20% of the
code and, in this case, 80% of the performance impact is caused by 20% of the issues.&lt;/p&gt;
&lt;p&gt;This is interesting because it makes you see that not all issues affect your system's performance the same way,
there are some issues that are more serious and not necessarily the same issue on a different project will impact
it the same way. Find that 20% and gain an 80% on performance, sounds easy, right?, but it isn't.&lt;/p&gt;
&lt;h3&gt;Takeaways&lt;/h3&gt;
&lt;p&gt;As a Software Engineer, sometimes I become so obsessed about performance I sometimes write things &lt;em&gt;already optimized&lt;/em&gt;,
this is a big fallacy and a huge mistake, premature optimization is bad because you don't know if what you're doing
is actually going to have a significative impact on your system's performance, blind optimization is worse, because
you might have some ways to get data or an insight on how your program is running but you're just too naive or lazy
to go get it.&lt;/p&gt;
&lt;p&gt;In the following posts, I'll recommend some tools to measure and later on some strategies to make your django site scale,
so, what you'll see in part 2 will be a set of tools to monitor your app's health.&lt;/p&gt;
&lt;p&gt;Don't forget to subscribe! I rarely send emails but when I do, It's interesting, I promise.&lt;/p&gt;</content><category term="Blog"></category><category term="python"></category><category term="django"></category><category term="scaling"></category></entry><entry><title>Classy Tasks with Celery</title><link href="//iffm.me/classy-tasks-with-celery.html" rel="alternate"></link><published>2017-03-23T00:00:00+04:00</published><updated>2017-03-23T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2017-03-23:/classy-tasks-with-celery.html</id><summary type="html">&lt;p&gt;This will be a short article, I just want to share something I learned this week.&lt;/p&gt;
&lt;p&gt;If you work with &lt;em&gt;Python&lt;/em&gt; and chances are you've ran into &lt;em&gt;celery&lt;/em&gt; at least once, hopefully more than once, depending on how complex the projects
you've worked on are.&lt;/p&gt;
&lt;p&gt;If you don't know it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This will be a short article, I just want to share something I learned this week.&lt;/p&gt;
&lt;p&gt;If you work with &lt;em&gt;Python&lt;/em&gt; and chances are you've ran into &lt;em&gt;celery&lt;/em&gt; at least once, hopefully more than once, depending on how complex the projects
you've worked on are.&lt;/p&gt;
&lt;p&gt;If you don't know it yet, &lt;em&gt;Celery&lt;/em&gt; is a task scheduling library that lets you schedule heavy tasks to be ran later, for example, resizing an image, sending an email or posting data to a 3rd party service, those are things that can be done &lt;em&gt;later&lt;/em&gt; so you don't have to keep your users waiting online for something to finish and could actually fail.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Celery&lt;/em&gt; lets you &lt;code&gt;delay&lt;/code&gt; the execution of those tasks and put retry policies in place so you can re-run them after a given time under certain conditions, for example, a 3rd party service returned &lt;code&gt;500&lt;/code&gt; or &lt;code&gt;502&lt;/code&gt;, you might want to retry after, let's say, 20min to see if the issue is gone.&lt;/p&gt;
&lt;p&gt;This won't be an in depth tutorial, you can check &lt;em&gt;Celery&lt;/em&gt; &lt;a href="http://docs.celeryproject.org/en"&gt;here&lt;/a&gt; if you don't know it yet.&lt;/p&gt;
&lt;p&gt;Let's see this example in &lt;em&gt;Flask&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;upload_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Failure, please try again&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a very basic example, full of bad practices and code like this shouldn't be pushed to production but it serves to illustrate what I need to explain.&lt;/p&gt;
&lt;p&gt;Normally, what you might do is just call those three functions inside a task and just call the &lt;code&gt;task.delay()&lt;/code&gt; from the request handler, something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Success&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# tasks.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery.task&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;upload_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, those three functions are not supposed to be called synchronously, so, I don't want them laying in some module waiting for someone to call them outside a task. Reason being that, as said before, these are heavy processes that might keep my web server busy and prevent it from taking new requests for a while and also keep my users waiting on a &lt;em&gt;loading&lt;/em&gt; screen for a long time, which isn't a good user experience.&lt;/p&gt;
&lt;p&gt;I could delete them and copy all the code in my task function but it will lead to a potentially long function which will do a lot of things, it will be difficult to read and difficult to maintain, so... bad idea.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Celery&lt;/em&gt;'s &lt;code&gt;@task&lt;/code&gt; decorator, actually works as an object factory of &lt;code&gt;Task&lt;/code&gt; objects, and what it does is, it puts the decorated function in the &lt;code&gt;run()&lt;/code&gt; method, so, I could take advantage of the object oriented paradigm to encapsulate all that logic inside a task avoiding the risk of having those functions called synchronously.&lt;/p&gt;
&lt;p&gt;It would look something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProcessImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ignore_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Code to download the image from a given url&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Code to resize the image&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Code to upload an image to a certain location&lt;/span&gt;


&lt;span class="c1"&gt;# We need an instance we can call delay() on&lt;/span&gt;
&lt;span class="n"&gt;process_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProcessImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And done, we can implement also a notification logic to inform the user if there's any issue processing the image after retrying and that kind of
things, but I'll leave that for another post.&lt;/p&gt;
&lt;p&gt;By doing a &lt;em&gt;class based task&lt;/em&gt; for complex background jobs, we can produce cleaner code which is easier to maintain and to read and keep those heavy tasks encapsulated so no one calls them directly from a controller or a django view.&lt;/p&gt;
&lt;p&gt;I know this is not the best way to implement this use case, we could have done it with a &lt;code&gt;TaskTree&lt;/code&gt; or with callbacks, but I wanted to show how to use classes to define tasks. I'll explain those approaches in future posts. :-)&lt;/p&gt;</content><category term="Blog"></category><category term="python"></category><category term="programming"></category><category term="celery"></category></entry><entry><title>The evilness of None!</title><link href="//iffm.me/the-evilness-of-none.html" rel="alternate"></link><published>2017-03-13T00:00:00+04:00</published><updated>2017-03-13T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2017-03-13:/the-evilness-of-none.html</id><summary type="html">&lt;p&gt;Recently at work, i was solving one bug on one of our services, it was popping up in newrelic at least 9 times a week, this is one of the services we use in the monetization process at the office, so, it's a critical one, the least errors we 
see …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently at work, i was solving one bug on one of our services, it was popping up in newrelic at least 9 times a week, this is one of the services we use in the monetization process at the office, so, it's a critical one, the least errors we 
see in newrelic for this service, the better.&lt;/p&gt;
&lt;p&gt;The error looked a bit like a nonsense, basically some user's subscriptions were coming as &lt;code&gt;null&lt;/code&gt; values or &lt;code&gt;None&lt;/code&gt;, in Python.&lt;/p&gt;
&lt;p&gt;Debugging the code and tracing the logs I found the like where it was failing and it looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_oldest_subscription_for_addon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addon_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;  &lt;span class="c1"&gt;# This was the failing line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method says it returns a &lt;code&gt;subscription&lt;/code&gt; object, but it's returning &lt;code&gt;None&lt;/code&gt;, why?&lt;/p&gt;
&lt;p&gt;I digged deeper and opened the &lt;code&gt;models.py&lt;/code&gt; file I searched for the method's name and bingo! I got it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_oldest_subscription_for_addon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addon_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_active_subscriptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addon_credits_left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addon_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And... that's where the &lt;code&gt;None&lt;/code&gt; is coming from...&lt;/p&gt;
&lt;h2&gt;What's wrong about this?&lt;/h2&gt;
&lt;p&gt;I'm sure we all have written similar pieces of code, search for something meeting certain conditions and, if we get nothing, &lt;code&gt;return null&lt;/code&gt; or, &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; or whatever you call it in your language of choice. And it's wrong in so many ways.&lt;/p&gt;
&lt;p&gt;Truth is, &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare"&gt;Tony Hoare&lt;/a&gt; , the creator of the Null instance while he was developing the type system for ALGOL, called it his &lt;em&gt;billion-dollar mistake&lt;/em&gt;. I'm sure this bug affected our revenue in some way, maybe the impact wasn't that much because it was in some cases when a user was going to highlight his publication (feature an ad, in dubizzle lingo) and... yes, we were giving away free highlights because of this bug.&lt;/p&gt;
&lt;p&gt;Returning &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; is usually a way to handle a case when we didn't find what we were looking for and it leads us to check for the result after calling the function which causes a bifurcation in the program flow, yes, it generates a different execution path which gives us one more place to introduce bugs or to check for errors. And we have to do this every time we call that function or method.&lt;/p&gt;
&lt;p&gt;Now, imagine we call that function 500 times within the program, it will generate 1000 branches, 500 when we found what we were looking for and other 500 where we returned &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since i read &lt;em&gt;Clean Code&lt;/em&gt; by Robert Martin, I try to keep in mind the key principles of what we call &lt;strong&gt;clean code&lt;/strong&gt;. Everything from naming to design patterns, single responsibility principle, the newspaper principle, keeping things as short and simple as possible, doing one thing and one thing only on every entity of our program (classes, functions, variables, etc) and also the &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How can we make it right?&lt;/h2&gt;
&lt;p&gt;One of the principles shown in &lt;em&gt;Clean Code&lt;/em&gt; has to do with naming. All names should be intuitive, it should describe in few words what the &lt;code&gt;class&lt;/code&gt; is, what the method does or what the attribute or variable holds. No matter how long the name is, with some limits and without exaggerating or being too verbose, which takes me to the second principle I'm going to talk about, &lt;em&gt;A function must perform one and only one action&lt;/em&gt;, so, if a method should return a &lt;code&gt;subscription&lt;/code&gt; object, it must always return a &lt;code&gt;subscription&lt;/code&gt; object. If we stick to these two rules, the name of our functions should intuitive, because it will describe the action, and short enough because it will do only one thing.&lt;/p&gt;
&lt;p&gt;This is also a good way to diagnose if I'm writing good code, whenever I'm naming a function and I'm being forced by rule number 1 to add an &lt;em&gt;and&lt;/em&gt; or an &lt;em&gt;or&lt;/em&gt; to the name of the function, I'm probably breaking rule number 2.&lt;/p&gt;
&lt;p&gt;With some exceptions, for example, some functions could take a different course of action under certain conditions for a very good reason, for example, django's &lt;code&gt;get_object_or_404()&lt;/code&gt; shortcut, and also manager methods &lt;code&gt;get_or_create()&lt;/code&gt; and &lt;code&gt;update_or_create()&lt;/code&gt; are keeping us from taking care of very common web  application and databases flows like returning 404 if we don't find an object, creating an object if it's not there yet and it has to be or performing an upsert operation.&lt;/p&gt;
&lt;p&gt;This could lead to long names sometimes but nowadays we have auto-completion tools and flexible line length rules (even PEP8 is flexible about the 79 characters line length) so i don't think it's too much of a big deal.&lt;/p&gt;
&lt;h2&gt;How can we avoid this?&lt;/h2&gt;
&lt;p&gt;There are several ways we could have avoided this, some of them cleaner than others, let's see.&lt;/p&gt;
&lt;p&gt;1.- &lt;strong&gt;Docstring:&lt;/strong&gt; nowadays we use integrated development environments (IDE) and all of them provide some meta information about the objects in our code by hovering over the name, there are also plugins for most of the editors out there... vim, Emacs, sublime, atom you name it. By writing a proper docstring for that method, it will be picked up and shown as a tooltip by one of these tools, no matter which editor we use, if we have one of those code completion plugins, it will show up. This isn't too intuitive, and doesn't provide the information right away, you have to read the docstring somehow and, if you don't have a good code completion tool, you will still need to open the &lt;code&gt;models.py&lt;/code&gt; file and read what the code does. This option is probably the easiest one also the least clean one. &lt;/p&gt;
&lt;p&gt;2.- &lt;strong&gt;Correct naming:&lt;/strong&gt; Function should had been called &lt;code&gt;get_oldest_subscription_for_addon_or_none()&lt;/code&gt;, yes, name is too long, but at least the programmer using that function would be aware of the &lt;code&gt;return None&lt;/code&gt; behavior  while using that function without having to open the file that defines it. The length of the function name is not an issue if we have an auto-completion tool, but the main issue remains, the fact that we are returning &lt;code&gt;None&lt;/code&gt;, we shouldn't do that, still cleaner than option 1.&lt;/p&gt;
&lt;p&gt;3.- &lt;strong&gt;Raise an exception:&lt;/strong&gt;  the right way to handle this is to &lt;code&gt;raise&lt;/code&gt; an unchecked exception and and handle it. The method should return a &lt;code&gt;subscription&lt;/code&gt; object and it assumes it will find one and not being able to return one is an anomaly, so, we could raise an unchecked exception and handle it in the upper levels.&lt;/p&gt;
&lt;p&gt;4.- &lt;strong&gt;Null Object Pattern:&lt;/strong&gt; I don't know if it makes sense to implement such thing in Python, but there's a design pattern to take care of this kind of cases. Basically, you define an object that meets the same interface of the object you are expecting only that it's empty, this helps you continue with the same execution flow without any problem, you can read about it &lt;a href="https://en.wikipedia.org/wiki/Null_Object_pattern"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What did I do?&lt;/h2&gt;
&lt;p&gt;I opted for option 2, although is not the cleanest one, because of the way the code was written it was the one that supposed less changes to the code. To be honest, the right refactor would be option 3.&lt;/p&gt;
&lt;p&gt;I just renamed the function and changed all of the invocations and moved that &lt;code&gt;package = subscription.package&lt;/code&gt; line below a check for the &lt;code&gt;subscription&lt;/code&gt; to exist that was already there. Committed, pushed and released the bug-fix and that was it. After that, i got curious about who wrote that code, so, i went back on git's history and ran a git blame.&lt;/p&gt;
&lt;p&gt;Surprise :) it was me :).&lt;/p&gt;
&lt;p&gt;I'll refactor it the right way soon.&lt;/p&gt;</content><category term="Blog"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Django: vistas basadas en clases</title><link href="//iffm.me/django-vistas-basadas-en-clases.html" rel="alternate"></link><published>2015-07-25T00:00:00+04:00</published><updated>2015-07-25T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2015-07-25:/django-vistas-basadas-en-clases.html</id><summary type="html">&lt;p&gt;Tenía pendiente escribir sobre esto desde hace tiempo, pero entre una
cosa y otra siempre terminaba escribiendo sobre otra cosa y las vistas
basadas en clases quedaban olvidadas.&lt;/p&gt;
&lt;p&gt;Las vistas basadas en clases nos permiten simplificar muchísimo el
código, reduciendo, para muchos casos, la escritura de vistas a
simplemente heredar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tenía pendiente escribir sobre esto desde hace tiempo, pero entre una
cosa y otra siempre terminaba escribiendo sobre otra cosa y las vistas
basadas en clases quedaban olvidadas.&lt;/p&gt;
&lt;p&gt;Las vistas basadas en clases nos permiten simplificar muchísimo el
código, reduciendo, para muchos casos, la escritura de vistas a
simplemente heredar de usas vistas genéricas y agregar algunos
&lt;a href="http://iffm.me/cosas-que-he-aprendido-parte-ii.html"&gt;mixins&lt;/a&gt;{.reference
.external}, son un recurso bastante potente y que deberíamos tomar en
cuenta en los proyectos que estemos o vayamos a desarrollar y que además
está allí desde django 1.3.&lt;/p&gt;
&lt;p&gt;Cuando estaba empezando a escribir la introducción, me dió por revisar
el blog de &lt;a href="http://alvarohurtado.es"&gt;Álvaro Hurtado&lt;/a&gt;{.reference
.external}, un compañero de trabajo en dubizzle, conseguí varios
artículos que voy a compartir porque están bastante sencillos y fáciles
de entender y, además, en perfecto español, es raro que la gente decida
hacer un blog en español y mantenerse fiel sin escribir en inglés.&lt;/p&gt;
&lt;p&gt;Acá los links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.alvarohurtado.es/django-vistas-basadas-en-clases-i-introduccion/"&gt;Introducción&lt;/a&gt;{.reference
    .external}: explicación breve acerca de las Vistas Basadas en Clases&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alvarohurtado.es/django-vistas-basadas-en-clases-ii-detail-view/"&gt;DetailView&lt;/a&gt;{.reference
    .external}: ejemplos sobre la vista de detalle&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alvarohurtado.es/django-vistas-basadas-en-clases-iii-list-view/"&gt;ListView&lt;/a&gt;{.reference
    .external}: ejemplos sobre la vista de lista&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Espero que sean de su agrado.&lt;/p&gt;</content><category term="Español"></category><category term="django"></category><category term="python"></category><category term="vistas basadas en clases"></category><category term="cbv"></category></entry><entry><title>Cosas que he aprendido: Descriptores</title><link href="//iffm.me/cosas-que-he-aprendido-descriptores.html" rel="alternate"></link><published>2014-12-01T00:00:00+04:00</published><updated>2014-12-01T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-12-01:/cosas-que-he-aprendido-descriptores.html</id><summary type="html">&lt;p&gt;Bueno, llevo ya unos años dedicado casi 100% a desarrollo web con
&lt;em&gt;Python&lt;/em&gt;, unos años en los que he aprendido muchas cosas sobre el
lenguaje y, por un momento, pensé que sabía suficiente, pero cuando uno
empieza a pensar eso es peligroso, al final, nunca se sabe suficiente y
siempre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bueno, llevo ya unos años dedicado casi 100% a desarrollo web con
&lt;em&gt;Python&lt;/em&gt;, unos años en los que he aprendido muchas cosas sobre el
lenguaje y, por un momento, pensé que sabía suficiente, pero cuando uno
empieza a pensar eso es peligroso, al final, nunca se sabe suficiente y
siempre hay mucho por aprender.&lt;/p&gt;
&lt;p&gt;El año pasado, durante mi entrevista para entrar en
&lt;a class="reference external" href="http://dubizzle.com"&gt;dubizzle&lt;/a&gt; aprendí un
concepto nuevo que incluye python y que es súper interesante, podría
resultar útil para alguien y, sino, escribiendo sobre ello me ayudo a mi
mismo a recordarlo y a entenderlo mejor.&lt;/p&gt;
&lt;p&gt;Python, incluye una cantidad enorme de características en su biblioteca
estándar que nos ayudan a resolver problemas comunes del día a día y
ofrecer interfaces más intuitivas y pythónicas, tal el es caso de las
propiedades o &lt;em&gt;properties&lt;/em&gt;. Hablaré un poco de ellas porque son claves
para entender el concepto de descriptores o &lt;em&gt;descriptors&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;Básicamente, es una función que convierte en un &lt;em&gt;getter&lt;/em&gt; un atributo que
queremos que sea de sólo lectura, pero su uso más común es retornar
manejar el acceso o controlar el valor de atributos que dependen del
valor de otros atributos del mismo objeto y proveer una interfaz de
acceso más pythónica a dicho atributo, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# declaración de atributos&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# inicialización de lo que sea que haga falta&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_be_used&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_expired&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_consumed&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_expired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expiration_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_consumed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used_credits&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_credits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, se simplifica un poco el acceso a estos atributos, se
encapsula la llamada a la función correspondiente y se da una interfaz
como si se tratara de un atributo, escondiendo la complejidad "tras
bastidores", de otra manera, las llamadas a las funciones serían
explícitas y el código se vería más complejo de lo que en realidad es.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo un poco más complejo y en el que los descriptores
pudieran ayudar a simplificar la implementación manteniendo una interfaz
simple.&lt;/p&gt;
&lt;p&gt;Digamos que necesitamos escribir una clase que representa una instancia
de libro en una casa editorial, todo bajo las siguientes reglas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cada libro tiene un título, cuya longitud máxima y mínima son 500 y
    10 respectivamente&lt;/li&gt;
&lt;li&gt;Cada libro tiene un precio, que debe ser mayor que cero&lt;/li&gt;
&lt;li&gt;Cada libro tiene un número de existencias en inventario, que debe
    ser mayor que cero&lt;/li&gt;
&lt;li&gt;Cada libro tiene un año de publicación, que sebe ser un número mayor
    que 1300 (sí, ya se que hay mejores manera de hacer esto)&lt;/li&gt;
&lt;li&gt;Cada libro tiene un nombre de autor, cuya longitud máxima y mínima
    debe ser 50 y 10, respectivamente&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto puede implementarse fácilmente usando &lt;em&gt;properties&lt;/em&gt; y &lt;em&gt;setters&lt;/em&gt;,
veamos como&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;TITLE_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="n"&gt;TITLE_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;AUTHOR_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="n"&gt;AUTHOR_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;PUB_YEAR_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1300&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;


    &lt;span class="c1"&gt;# cool&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt;

    &lt;span class="nd"&gt;@title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TITLE_MIN&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TITLE_MAX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# otra vez...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt;

    &lt;span class="nd"&gt;@author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_MIN&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_MAX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# Bueno, ya se hacen una idea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Habría que hacer lo mismo para cada atributo/propiedad, la interfaz es
simple, pero la implementación no es elegante, se ve un poco sucia y
repetitiva, sin embargo, es válida.&lt;/p&gt;
&lt;h2&gt;Descriptores&lt;/h2&gt;
&lt;p&gt;Los descriptores vienen a resolver este problema, básicamente un
descriptor es una &lt;em&gt;property&lt;/em&gt; encapsulada en una clase que nos permite
realizar las validaciones necesarias de manera simple. Algo así como un
"&lt;em&gt;property&lt;/em&gt; con esteroides", veamos de qué se trata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_default&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_default&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_default&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud Inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Valor menor de lo permitido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto, nuestra clase &lt;em&gt;Book&lt;/em&gt; cambiaría de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Los descriptores siempre se colocan al nivel de la clase&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una implementación mucho más limpia y legible, veamos cómo funciona&lt;/p&gt;
&lt;p&gt;Supongamos que ya hemos hecho algo como&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;La Muerte de Honorio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Miguel Otero Silva&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1963&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Al ejecutar, por ejemplo &lt;em&gt;b.year = 1200&lt;/em&gt;, se va a invocar realmente
    &lt;em&gt;b.year.__set__(b, 1200)&lt;/em&gt; realizando las validaciones necesarias&lt;/li&gt;
&lt;li&gt;Al ejecutar, por ejemplo, &lt;em&gt;t = b.title&lt;/em&gt;, se va a invocar realmente
    &lt;em&gt;b.title.__get__(m, Book)&lt;/em&gt; retornando el valor solicitado&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Se puede hacer lo que sea en los métodos &lt;em&gt;__get__()&lt;/em&gt; y
&lt;em&gt;__set__()&lt;/em&gt; y, además, se puede definir otro método
&lt;em&gt;__delete__()&lt;/em&gt; que es invocado cuando se borra el descriptor, por
ejemplo &lt;em&gt;del(b.author)&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Posible puesta de torta&lt;/h3&gt;
&lt;p&gt;Hay dos cosas que llaman la atención en los ejemplos de los
descriptores:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;La primera de ellas es que &lt;strong&gt;se colocan a nivel de la clase&lt;/strong&gt;, esto
    es porque si se hace de otra manera, los métodos que implementan los
    descriptores pueden generar &lt;strong&gt;comportamientos extraños&lt;/strong&gt;. Por
    ejemplo, si se coloca dentro del &lt;em&gt;__init__()&lt;/em&gt;, el descriptor,
    pasa a ser un &lt;strong&gt;atributo de la instancia&lt;/strong&gt; y retornará el valor que
    tiene como atributo de instancia, es decir, una instancia de la
    clase del descriptor, y no el valor que retorna el &lt;em&gt;__get__()&lt;/em&gt;
    del descriptor.&lt;/li&gt;
&lt;li&gt;La segunda es que se utiliza un diccionario para almacenar asignar y
    retornar valores al descriptor, esto es porque al ser utilizados
    como &lt;strong&gt;atributos de clase&lt;/strong&gt;, estos se instancian &lt;strong&gt;sólo&lt;/strong&gt; una vez,
    es decir, se tiene sólo &lt;strong&gt;una referencia&lt;/strong&gt; a esos objetos, por lo
    que todas las instancias de &lt;em&gt;Book&lt;/em&gt;, comparten las mismas instancias
    de los respectivos descriptores, entonces, si se almacena el valor
    directamente en el descriptor, siempre obtendremos el &lt;strong&gt;último valor
    asignado&lt;/strong&gt; para ese campo en alguna instancia de &lt;em&gt;Book&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Espero haber ayudado a mejorar un poco sus prácticas de programación (o
al menos las mías), si te parece que lo que escribo es útil, te invito
suscribirte a mi lista de correos en la caja que está a la derecha,
tengo varios proyectos en mente que estaré anunciando por esa vía y que
quizás te podrían interesar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aprender a usar descriptores no sólo hace nuestro set de herramientas
más grande, genera un entendimiento más profundo de cómo funciona
Python y ayuda a apreciar la elegancia de su diseño. - Raymond
Hettinger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Muchas gracias por leerme, no olviden suscribirse y seguirme, estaré
publicando más cosas sobre desarrollo y programación por esas vías.&lt;/p&gt;</content><category term="Español"></category><category term="python"></category><category term="programación"></category><category term="descriptores"></category></entry><entry><title>Heroku + Django sin morir en el intento (Parte 2)</title><link href="//iffm.me/heroku-django-sin-morir-en-el-intento-parte-2.html" rel="alternate"></link><published>2014-09-20T00:00:00+04:00</published><updated>2014-09-20T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-09-20:/heroku-django-sin-morir-en-el-intento-parte-2.html</id><summary type="html">&lt;p&gt;En el artículo anterior, hablamos de IaaS y de PaaS y de cómo se
diferencian concluimos que &lt;em&gt;Heroku&lt;/em&gt; es PaaS, además, expusimos algunas
de las limitaciones que nos impone la plataforma para desplegar nuestras
aplicaciones y cómo trabajar alrededor de ellas para hacer funcionar
todo.&lt;/p&gt;
&lt;p&gt;Muchas veces, quizás por inocentes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el artículo anterior, hablamos de IaaS y de PaaS y de cómo se
diferencian concluimos que &lt;em&gt;Heroku&lt;/em&gt; es PaaS, además, expusimos algunas
de las limitaciones que nos impone la plataforma para desplegar nuestras
aplicaciones y cómo trabajar alrededor de ellas para hacer funcionar
todo.&lt;/p&gt;
&lt;p&gt;Muchas veces, quizás por inocentes o inexpertos, tendemos a hacer todo
en la vista (y hablo de vistas de &lt;em&gt;django&lt;/em&gt;), por ejemplo, necesitamos
enviar algo al servidor donde hosteamos las imágenes, simplemente
hacemos ejecutamos ese request en la vista, necesitamos enviar un correo
electrónico de confirmación, nada, lo enviamos en la vista, necesitamos
procesar una imagen para reducir la calidad y que ocupe menos espacio en
el servidor donde la vamos a hostear, dale... en la vista.&lt;/p&gt;
&lt;p&gt;Bueno, exagero un poco, quizás no en la vista, si somos estrictos con
nuestro código, escribiremos una función que suba la foto al servidor,
otra que envíe el correo y otra que procese la imagen para reducir el
tamaño y llamaremos todo desde la vista. Este enfoque sigue estando
errado y, a continuación, voy a explicar por qué.&lt;/p&gt;
&lt;p&gt;Todos venimos de hacer proyectos en la universidad, algunos más
difíciles que otros, en algún proyecto, seguramente nos tocó realizar
llamadas a alguna &lt;em&gt;API REST&lt;/em&gt;, o enviar algún archivo a un servidor
remoto, en todos los casos, estoy seguro de que todos hicimos lo mismo,
una función que se ejecuta cuando enviamos el formulario y hace todo en
línea: llamadas remotas, envío de archivos, envío de correos, etc.&lt;/p&gt;
&lt;p&gt;No es incorrecto, funciona, pero ¿cuánto tardó la página siguiente en
cargar?, la pregunta más adecuada sería ¿cuánto tiempo tardó la función
en redirigirme a la siguiente página?, calculemos unos 3 a 5 segundos
por llamada remota y unos 2 a 3 segundos, total, alrededor de 15
segundos en redirigir, a eso hay que sumarle el tiempo de carga de la
página siguiente.&lt;/p&gt;
&lt;p&gt;Particularmente, mi primer trabajo fue en el mundo de los ERP, es una
historia totalmente distinta, si una persona manda a generar un reporte
que tarda 4 horas en ejecutarse y para ello el programa se bloquea y no
le permite hacer más nada, simplemente no tiene otra opción más que
esperar las 4 horas sentado en su escritorio, ir a tomarse un café,
bajar a fumar un cigarrillo hasta que esté listo.&lt;/p&gt;
&lt;p&gt;Cuando programas para web, debes tomar en cuenta que debes ser gentil
con el usuario y no hacerlo esperar, tu página debe responder rápido,
sino, hay muchas otras páginas que hacen lo mismo y el usuario
simplemente tiene que regresar a la pestaña del navegador donde está su
búsqueda en google y seleccionar otro resultado. Una buena &lt;em&gt;rule of
thumb&lt;/em&gt; a la hora de ejecutar operaciones pesadas, como todas las que
incluyan llamadas remotas o procesamiento de imágenes, es realizarlas de
manera asíncrona, para ello debemos valernos de &lt;em&gt;algo&lt;/em&gt; que nos permita
retrasar la ejecución de una tarea.&lt;/p&gt;
&lt;p&gt;Por un lado, necesitaremos algo que nos sirga para mantener una cola de
tareas pendientes por ejecutar, por otro lado necesitamos algo que vaya
leyendo esas tareas y ejecutándolas, la manera más simple de hacerlo en
&lt;em&gt;Python&lt;/em&gt; es con una librería llamada &lt;em&gt;python-rq&lt;/em&gt; y usando &lt;em&gt;Redis&lt;/em&gt; como
backend de tareas, es muy fácil de configurar y súper sencilla de usar
para la mayoría de proyectos pequeños a medianos funcionará bastante
bien. Para proyectos a mayor escala, quizás lo mejor sea utilizar
&lt;em&gt;celery&lt;/em&gt; con &lt;em&gt;RabbitMQ&lt;/em&gt; como broker de mensajes. Hay muchas herramientas
que podemos usar como backend de mensajes: Redis, RabbitMQ, ZeroMQ,
Kafka, HornetQ... es cuestión de evaluarlas y ver cuál se ajusta más al
proyecto en cuestión en el cual estamos trabajando.&lt;/p&gt;
&lt;p&gt;Como todo en &lt;em&gt;django&lt;/em&gt;, tenemos un paquete llamado &lt;em&gt;django-rq&lt;/em&gt; que nos
ayuda a organizar el código de una mejor manera y nos hace la vida más
fácil, empecemos por descargar las librerías y paquetes necesarias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    sudo aptitude install redis-server&lt;/span&gt;
&lt;span class="err"&gt;    pip install django-rq django&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si estamos en &lt;em&gt;Heroku&lt;/em&gt;, no es necesario instalar &lt;em&gt;redis&lt;/em&gt;, simplemente
agregar los nuevos paquetes Python al &lt;em&gt;requirements.txt&lt;/em&gt; para que sean
instalados al hacer &lt;em&gt;push&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Para poder agregar trabajos a las colas, debemos declararlas para que
&lt;em&gt;django-rq&lt;/em&gt; las reconozca, simplemente agregamos una nueva variable en
nuestro &lt;em&gt;settings.py&lt;/em&gt;. A continuación un ejemplo de configuración para
&lt;em&gt;django_rq&lt;/em&gt;, la cola &lt;em&gt;default&lt;/em&gt; es un ejemplo para desarrollo, la cola
&lt;em&gt;high&lt;/em&gt; es un ejemplo de configuración para Heroku si estamos usando el
&lt;em&gt;add on&lt;/em&gt; de &lt;em&gt;Redis To Go&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;RQ_QUEUES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDISTOGO_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, las funciones sumamente pesadas pueden ser encoladas en
cualquiera de las dos colas que hemos declarado en &lt;em&gt;settings.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcion_sumamente_pesada&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argumento&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que haremos en nuestra vista es, en vez de llamar a la función
directamente, le diremos a &lt;em&gt;django_rq&lt;/em&gt; que agregue el trabajo en la
cola que consideremos conveniente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django_rq&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;funcion_sumamente_pesada&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#...&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_rq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# si no indicamos una cola, retorna la cola &amp;#39;default&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;funcion_sumamente_pesada&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argumento&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También decorar las funciones que queremos encolar, esto hace que el
código se vea un poco más limpio, pero el efecto es el mismo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;

    &lt;span class="nd"&gt;@job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcion_sumamente_pesada&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argumentos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y luego, en la vista:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#...&lt;/span&gt;
        &lt;span class="n"&gt;funcion_sumamente_pesada&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argumento&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que rq hace es tomar el &lt;em&gt;objeto función&lt;/em&gt;, serializarlo usando
&lt;em&gt;pickle&lt;/em&gt; y guardar ese objeto serializado en redis. Ahora que tenemos el
trabajo encolado, necesitamos &lt;em&gt;algo&lt;/em&gt; para leerlo de redis,
des-serializarlo y ejecutarlo.&lt;/p&gt;
&lt;p&gt;RQ, viene con un worker que podemos ejecutar en un &lt;em&gt;dyno&lt;/em&gt; aparte
(recuerden agregar la entrada correspondiente en el &lt;em&gt;Procfile&lt;/em&gt; de
Heroku), simplemente corremos el siguiente comando en el terminal para
probar localmente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    python manage.py rqworker high default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la consola, podemos ver cómo los trabajos se van ejecutando, incluso,
si apagamos el worker y mandamos a encolar algunos trabajos, al ejecutar
de nuevo el worker de rq podemos ver como los va leyendo de redis y los
ejecuta.&lt;/p&gt;
&lt;h2&gt;Consideraciones con objetos persistentes en base de datos&lt;/h2&gt;
&lt;p&gt;Bueno, ya sabemos que rq hace un &lt;em&gt;pickle&lt;/em&gt; de la función y sus argumentos
y envía esa información a &lt;em&gt;Redis&lt;/em&gt; para luego ser leído por el worker,
hacer el &lt;em&gt;unpickle&lt;/em&gt; y ejecutar el trabajo.&lt;/p&gt;
&lt;p&gt;A menudo, necesitamos hacer &lt;em&gt;delay&lt;/em&gt; de un trabajo que actúa sobre
objetos que persisten en la base de datos, nuestra primera tentación es
simplemente pasar los objetos como argumentos al trabajo.&lt;/p&gt;
&lt;p&gt;Ahora, veamos, analicemos qué ocurrirá. Al encolar el trabajo tanto la
función como sus argumentos serán serializados, estos argumentos son
objetos que pueden ser modificados. Luego de encolar, supongamos que
modifico uno de los atributos del objeto y lo guardo en la base de
datos, luego, al ejecutarse mi trabajo la función también modifica otro
atributo y guarda el objeto en la base de datos.&lt;/p&gt;
&lt;p&gt;Lo que va a ocurrir es que, como la referencia que fue serializada al
momento de encolar está desactualizada, la modificación que se hizo
luego de encolar no estará reflejada en el objeto luego de ejecutar el
trabajo.&lt;/p&gt;
&lt;h3&gt;La solución&lt;/h3&gt;
&lt;p&gt;Simplemente no pasar objetos persistentes como argumentos, es mucho
mejor simplemente dar los &lt;em&gt;id&lt;/em&gt; de base de dato al trabajo y que dentro
de la función se ejecute un query para traerlos, de esta manera evitamos
conflictos y dolores de cabeza como el antes descrito.&lt;/p&gt;
&lt;p&gt;Espero que esto sea de ayuda, es buena práctica trabajar con colas para
trabajos pesados en cualquier proyecto web, no sólo si estamos corriendo
nuestra app en Heroku.&lt;/p&gt;</content><category term="Español"></category><category term="heroku"></category><category term="PAAS"></category><category term="python"></category><category term="django"></category></entry><entry><title>Heroku + Django sin morir en el intento (Parte 1)</title><link href="//iffm.me/heroku-django-sin-morir-en-el-intento-parte-1.html" rel="alternate"></link><published>2013-09-23T00:00:00+04:00</published><updated>2013-09-23T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2013-09-23:/heroku-django-sin-morir-en-el-intento-parte-1.html</id><summary type="html">&lt;p&gt;Antes, para tener tu sistema web en línea, debías contratar un servicio
de Servidor Dedicado o mínimo un VPS y administrarlo, si tenías más
presupuesto, comprabas un servidor y lo acondicionabas o alquilabas un
rack en algún centro de datos para tenerlo colocado allí.&lt;/p&gt;
&lt;p&gt;Ahora, con el boom de &lt;em&gt;Infraestructura …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Antes, para tener tu sistema web en línea, debías contratar un servicio
de Servidor Dedicado o mínimo un VPS y administrarlo, si tenías más
presupuesto, comprabas un servidor y lo acondicionabas o alquilabas un
rack en algún centro de datos para tenerlo colocado allí.&lt;/p&gt;
&lt;p&gt;Ahora, con el boom de &lt;em&gt;Infraestructura como Servicio&lt;/em&gt; (IaaS) y
&lt;em&gt;Plataforma como Servicio&lt;/em&gt; (PaaS), ya no es necesario tener servidores
propios y, dependiendo del servicio, es decir, si es &lt;em&gt;IaaS&lt;/em&gt; o &lt;em&gt;PaaS&lt;/em&gt;,
tampoco debes tener conocimientos de administración de servidores.&lt;/p&gt;
&lt;h2&gt;IAAS vs PAAS&lt;/h2&gt;
&lt;p&gt;En general, un proveedor de &lt;em&gt;IaaS&lt;/em&gt; te da el hardware para que tú lo
configures y ensambles el ambiente en el que va a correr tu aplicación,
esto es instalar todos los paquetes de software necesarios par que el
proyecto corra: servidor de base de datos, servidor web, intérpretes,
bibliotecas, storages adicionales y un largo &lt;em&gt;end of thinking capacity&lt;/em&gt;
(etc). La ventaja de un proveedor de este tipo es que hacen que escalar
tu infraestructura de manera horizontal es realmente fácil y no tienes
que construir un centro de datos para albergar tu granja de servidores
ni mucho menos configurar todo lo que eso implica, un ejemplo de
servicios de este tipo es el &lt;em&gt;Elastic Compute Cloud&lt;/em&gt; de &lt;em&gt;Amazon Web
Services&lt;/em&gt; (AWS EC-2).&lt;/p&gt;
&lt;p&gt;Por otra parte, un proveedor de &lt;em&gt;PaaS&lt;/em&gt;, hace exactamente lo mismo, pero
con un nivel más de abstracción, te proveen toda la infraestructura y el
ambiente para que simplemente deposites tu código allí y pongas tu
aplicación a correr con configuraciones mínimas y sin ser un experto en
administración y configuración de servidores, de hecho, es transparente
para ti toda la nube que hay por detrás.
&lt;a class="reference external" href="http://www.heroku.com/"&gt;Heroku&lt;/a&gt; es un proveedor
de este tipo de servicio que además cumple con el &lt;a class="reference external" href="http://12factor.net/"&gt;12 factor
app&lt;/a&gt; por lo que además hace
que sea súper fácil ajustar tu código para correr allí y que tome los
parámetros de configuración que define la plataforma sin mucho problema.&lt;/p&gt;
&lt;h2&gt;Ahora, Heroku&lt;/h2&gt;
&lt;p&gt;El modelo de trabajo en &lt;em&gt;Heroku&lt;/em&gt; se basa en add-ons, que básicamente
integran tu sistema con un DBMS, un sistema de alertas en caso de fallos
o de monitoreo para ver el rendimiento, detectar cuellos de botella y
tomar correctivos al respecto, todo esto con unos cuantos clicks (y una
tarjeta de crédito), sin configurar absolutamente nada a nivel de
servidores sino todo a nivel de aplicación.&lt;/p&gt;
&lt;p&gt;Todo esto suena como un sueño hecho realidad y, en muchos casos, lo es,
pero nada es perfecto y &lt;em&gt;Heroku&lt;/em&gt;, aunque facilita muchísimas cosas a
nivel de despliegue, te complica muchas otras a nivel de desarrollo,
esto puede ser bueno, te obliga a optimizar y a aprender, pero a veces,
el esquema de plugins y addons puede volverse insostenible, sobre todo
cuando debes pagar por varios y el presupuesto es limitado, además,
desde el punto de vista de aplicación, &lt;em&gt;Heroku&lt;/em&gt; impone varias
limitaciones acerca de cómo debe comportarse, el tiempo en que debe
responder, el tiempo que debe durar el deploy y cuánto debe pesar.&lt;/p&gt;
&lt;h3&gt;Algunas limitaciones&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;El app debe iniciar en 60 segundos o menos:&lt;/em&gt; si este tiempo se
    excede, el deploy falla.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Heroku duerme dynos cada cierto tiempo:&lt;/em&gt; cada cierto tiempo Heroku
    reinicia los dynos, esto es un proceso totalmente aleatorio, por eso
    se recomienda tener al menos 2, si uno es reiniciado el otro sigue
    aceptando requests. Cuando esto ocurre, el proceso recibe un
    &lt;em&gt;SIGTERM&lt;/em&gt;, al recibir la señal, se tienen 10 segundos de gracia para
    terminar lo que se estaba haciendo antes de recibir un &lt;em&gt;SIGKILL&lt;/em&gt;
    y reiniciar.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;El app no puede pesar más de 300MB:&lt;/em&gt; de lo contrario, el deploy
    falla, es recomendable usar el .slugignore para excluir archivos que
    sólo se usan para desarrollo y que no hacen falta en producción, lo
    mismo con las librerías para testing, no deberían incluirse en el
    requirements.txt que va a producción.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;El app debe responder a los requests en 30 segundos:&lt;/em&gt; de lo
    contrario se levanta un error H12 (Worker Timeout) y la respectiva
    pantalla de &lt;em&gt;Application Error&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Heroku es stateless:&lt;/em&gt; esto quiere decir que no guarda estado, para
    conservar estado del app es necesario valerse de otras herramientas,
    como una base de datos, memcached, y servicios de
    almacenamiento externos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Algunos de los golpes&lt;/h3&gt;
&lt;p&gt;Con esas limitaciones se puede vivir, pero hay que darle la vuelta para
no desesperarse, hay algunas cosas que capaz son obvias, pero que uno no
las ve sino hasta que empieza a trabajar y se consigue con un problema,
basta con volver sobre las limitaciones antes expuestas y encontraremos
una respuesta o al menos una posible razón.&lt;/p&gt;
&lt;p&gt;Ahora voy a empezar a listar los problemas que he tenido en &lt;em&gt;RingTu&lt;/em&gt; y
cómo los solucioné. Recuerden que estoy trabajando con &lt;strong&gt;Django&lt;/strong&gt;, por
lo que todo lo he resuelto utilizando herramientas para este framework.&lt;/p&gt;
&lt;h4&gt;No es bueno para servir assets&lt;/h4&gt;
&lt;p&gt;Cuando digo assets, me refiero a los archivos estáticos que dan forma a
la interface web: css, js, imágenes, gradientes, ¿gifs animados?,
tipografías y demás cosas bonitas que hacen los diseñadores por
nosotros.&lt;/p&gt;
&lt;p&gt;Por defecto, nuestro dyno sirve todos estos archivos, además de servir
nuestra aplicación, aceptando peticiones de nuestros clientes,
procesándolas y decidiendo qué es lo que va a enviarse de vuelta.&lt;/p&gt;
&lt;p&gt;Servir los archivos estáticos o &lt;em&gt;static assets&lt;/em&gt; resulta en requests
adicionales que van a mantener ocupado nuestro dyno y esto nos cuesta
tiempo y, si ya estamos pagando, dinero. Esos requests adicionales se
podrían invertir en responder y procesar solicitudes nuevas y no en
entregar archivos estáticos, además, la &lt;strong&gt;buena práctica&lt;/strong&gt; con &lt;em&gt;django&lt;/em&gt;
es delegar la entrega de contenido estático a un &lt;strong&gt;servidor web&lt;/strong&gt; como
&lt;em&gt;Apache&lt;/em&gt; o &lt;em&gt;NGinx&lt;/em&gt; y así evitar procesamiento adicional a nivel de
&lt;em&gt;views&lt;/em&gt; (los &lt;em&gt;controladores&lt;/em&gt; de &lt;em&gt;django&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;La solución acá es, simplemente, almacenar los archivos estáticos &lt;em&gt;en
otro lado&lt;/em&gt;, puede ser incluso un &lt;em&gt;VPS&lt;/em&gt; con &lt;em&gt;Apache&lt;/em&gt; o &lt;em&gt;NGinx&lt;/em&gt; instalado,
pero hay varios servicios que pueden hacerlo mejor y optimizar la
entrega de contenidos como &lt;em&gt;Cloudfile&lt;/em&gt; de &lt;strong&gt;Rackspace&lt;/strong&gt; y, el que opté
por usar, &lt;em&gt;Simple Storage Service&lt;/em&gt; de &lt;strong&gt;Amazon&lt;/strong&gt;. Si ya tus assets no
cambian mucho, lo mejor es servirlos a través de una &lt;em&gt;CDN&lt;/em&gt; (Content
Delivery Nerwork o Red de Entrega de Contenidos), como &lt;em&gt;Cloudfront&lt;/em&gt;,
también de &lt;strong&gt;Amazon&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ahora, &lt;strong&gt;¿Cómo se resuelve esto en django?&lt;/strong&gt;, bueno, hay varias
librerías que te permiten sincronizar los archivos estáticos con un
servicio de almacenamiento remoto, la que decidí usar fue
&lt;a href="https://github.com/jamstooks/django-s3-folder-storage"&gt;django-s3-folder-storage&lt;/a&gt;{.reference
.external}, una pequeña librería que se vale de otra más compleja (y
completa, soporta múltiples servicios) llamada
&lt;a href="https://github.com/iserko/django-storages"&gt;django-storages&lt;/a&gt;{.reference
.external} para organizar tu contenido en directorios dentro de un
&lt;em&gt;bucket&lt;/em&gt; de &lt;em&gt;S3&lt;/em&gt;, es necesario agregar parámetros de configuración en
nuestro &lt;em&gt;settings.py&lt;/em&gt;, sería algo como esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;AWS_QUERYSTRING_AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_ACCESS_KEY_ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_SECRET_ACCESS_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_STORAGE_BUCKET_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Expires&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;PM&lt;/span&gt; &lt;span class="n"&gt;GMT&lt;/span&gt;
    &lt;span class="n"&gt;tenyrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AWS_HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Expires&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tenyrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%a, %d %b %Y 20:00:00 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3_folder_storage.s3.StaticStorage&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://%s.s3.amazonaws.com/static/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_S3_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;static/&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El parámetro de configuración AWS_QUERYSTRING_AUTH colocado en &lt;em&gt;False&lt;/em&gt;
es para que &lt;em&gt;S3&lt;/em&gt; no nos genere urls firmadas para los assets sino que
nos permita acceso público permanente. Si lo dejamos en &lt;em&gt;True&lt;/em&gt;, su valor
por defecto, nos va a generar un url válido por 5min y, como son
archivos estáticos, esta url no se va a refrescar nunca, así que nuestra
página se verá &lt;strong&gt;bien&lt;/strong&gt;, con todos sus estilos y efectos sólo mientras
duren las urls vigentes.&lt;/p&gt;
&lt;p&gt;Los demás son simplemente parámetros de configuración de S3, deben
recordar añadir las variables de configuración en &lt;em&gt;Heroku&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    heroku config:add AWS_ACCESS_KEY_ID=EL_KEY_ID_DE_AWS_S3&lt;/span&gt;
&lt;span class="err"&gt;    heroku config:add AWS_SECRET_ACCESS_KEY=EL_SECRET_KEY_ID_DE_AWS_S3&lt;/span&gt;
&lt;span class="err"&gt;    heroku config:add AWS_STORAGE_BUCKET_NAME=EL_NOMBRE_DEL_BUCKET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recuerden también colocar &lt;em&gt;s3_folder_storage&lt;/em&gt; entre los
&lt;em&gt;INSTALLED_APPS&lt;/em&gt; del proyecto y activar la opción de &lt;em&gt;Heroku&lt;/em&gt; para que
reconozca las variables de configuración en tiempo de compilación, de
otra manera, el deploy fallará.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    heroku labs:enable user-env-compile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto, ya deberíamos poder sincronizar los &lt;em&gt;assets&lt;/em&gt; a &lt;em&gt;S3&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    heroku run python manage.py collectstatic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dependiendo de qué tantos archivos estáticos tengamos, va a tardar más o
menos, va a enviar todo lo que esté en nuestro &lt;em&gt;STATIC_ROOT&lt;/em&gt; al &lt;em&gt;bucket
S3&lt;/em&gt; que configuramos anteriormente.&lt;/p&gt;
&lt;h4&gt;No puedes utilizar el sistema de archivos&lt;/h4&gt;
&lt;p&gt;Había dicho al principio que &lt;em&gt;Heroku&lt;/em&gt; es &lt;em&gt;stateless&lt;/em&gt;, es decir, no
conserva el estado de tu aplicación. Entonces ellos implementaron algo
llamado &lt;em&gt;Ephemeral Filesystem&lt;/em&gt;, es decir, un sistema de archivos
&lt;em&gt;efímero&lt;/em&gt;, que se reinicia cada vez que los dynos son reiniciados por
cualquier razón, sea un deploy o sea porque heroku los reinició.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué significa esto?&lt;/strong&gt;, pues que &lt;strong&gt;no puedes escribir a disco&lt;/strong&gt; como
lo harías en cualquier servidor &lt;em&gt;normal&lt;/em&gt;, si lo haces, debes saber que
cuando tu app sea reiniciada, perderás todos los archivos, tiene un poco
de sentido, cuando usas más de un dyno y escribes a disco, cuando el
usuario quiera recuperar lo que subió, no tenemos manera de saber cuál
dyno atendió aquella solicitud y no sabremos dónde buscar, así que, de
una manera u otra, lo mejor es almacenar los archivos de nuestros
usuarios en un lugar seguro y de donde podamos recuperarlos luego sin
problemas.&lt;/p&gt;
&lt;p&gt;Nuevamente podemos utilizar &lt;em&gt;AWS-S3&lt;/em&gt; para ello, con algunas
configuraciones adicionales, podemos hacer que por defecto nuestros
&lt;em&gt;media files&lt;/em&gt;, para usar la terminología de &lt;em&gt;django&lt;/em&gt;, sean almacenados
en nuestro &lt;em&gt;bucket&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Es necesario agregar las siguientes líneas a nuestro &lt;em&gt;settings.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    MEDIA_ROOT = &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    DEFAULT_FILE_STORAGE = &amp;#39;s3_folder_storage.s3.DefaultStorage&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    DEFAULT_S3_PATH = &amp;#39;media/&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;    MEDIA_URL = &amp;#39;http://%s.s3.amazonaws.com/media/&amp;#39; % AWS_STORAGE_BUCKET_NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto, todo lo que suban nuestros usuarios irá a la carpeta &lt;em&gt;media/&lt;/em&gt;
de nuestro bucket.&lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta que todo se está subiendo al mismo &lt;em&gt;bucket&lt;/em&gt; y la
política que se definió en principio para poder almacenar los archivos
estáticos da acceso público a todo el contenido por defecto, por lo que
hay que tomar previsiones &lt;em&gt;de alguna manera&lt;/em&gt; para que no todo el mundo
pueda ver los archivos de nuestros usuarios de manera directa.&lt;/p&gt;
&lt;p&gt;Acá expondré la estrategia que uso:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sobre-escritura del método save():&lt;/strong&gt; en los modelos que tengan un
    &lt;em&gt;ImageField&lt;/em&gt; o un &lt;em&gt;FileField&lt;/em&gt;, la idea de esto es sobreescribir la
    política de control de acceso particular para el archivo una ves que
    fue subido. Para esto utilizaremos una librería llamada
    &lt;a class="reference external" href="https://github.com/boto/boto"&gt;boto&lt;/a&gt; que es un
    wrapper en Python para el API de &lt;em&gt;AWS&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_videos/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.s3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
            &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VoiceMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S3Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULTS3_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_acl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;private&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto tenemos el archivo privado en &lt;em&gt;S3&lt;/em&gt;, ahora, necesitamos una
manera de darle acceso al usuario que es propietario del archivo.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Escribiendo una vista para acceder al archivo privado:&lt;/strong&gt; la mejor
    manera que conseguí para darle acceso al usuario a su archivo fue
    escribiendo una vista de &lt;em&gt;django&lt;/em&gt; que revisara que el usuario que
    origina el request es realmente el propietario del objeto y
    redirigirlo a la ubicación de su archivo en &lt;em&gt;S3&lt;/em&gt;. Escribiremos un
    pequeño helper, además, para encapsular la generación del URL, como
    es un archivo privado, el url debe ir firmado y sólo será válido por
    el tiempo que nosotros indiquemos, en este caso, lo haremos por
    una hora.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el helper colocamos lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_s3_redirect_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.s3.connection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;

        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_http&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;y en la vista:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Video&lt;/span&gt;

    &lt;span class="nd"&gt;@login_required&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_video&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_s3_redirect_url&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
            &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settinga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_S3_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_s3_redirect_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto generamos una url firmada y válida por 3600 segundos (una hora)
si el usuario que origina la solicitud es el propietario del objeto que
contiene el archivo (video) que se desea obtener, caso contrario
retornamos 403 ya que la persona no tiene permisos para ver ese
contenido.&lt;/p&gt;</content><category term="Español"></category><category term="heroku"></category><category term="django"></category><category term="python"></category><category term="PAAS"></category></entry><entry><title>Clientes SOAP en Python</title><link href="//iffm.me/clientes-soap-en-python.html" rel="alternate"></link><published>2013-08-18T00:00:00+04:00</published><updated>2013-08-18T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2013-08-18:/clientes-soap-en-python.html</id><summary type="html">&lt;p&gt;Como todos saben, y algunos me chalequean por eso, en la primera mitad
de 2013 cambié de trabajo dos veces, estaba algo aburrido en Metamax y
decidí aceptar una oportunidad en 4geeks, junto con una serie de
proyectos para una empresa en el extranjero que pintaban bastante bien,
una vez …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como todos saben, y algunos me chalequean por eso, en la primera mitad
de 2013 cambié de trabajo dos veces, estaba algo aburrido en Metamax y
decidí aceptar una oportunidad en 4geeks, junto con una serie de
proyectos para una empresa en el extranjero que pintaban bastante bien,
una vez que terminé los proyectos de la otra empresa, terminé
enamorándome del proyecto que desarrollaba desde 4geeks y uniéndome al
startup a tiempo completo.&lt;/p&gt;
&lt;h1&gt;La historia&lt;/h1&gt;
&lt;p&gt;La historia en 4geeks es muy graciosa, un tal Saúl Lustgarten llevaba
tiempo escribiendo en todas las listas de correo donde estoy pidiendo un
desarrollador Python, incluso me contactó personalmente varias veces vía
email y a través de &lt;em&gt;LinkedIn&lt;/em&gt; para desarrollar su &lt;em&gt;startup&lt;/em&gt;, una
central telefónica en la nube llamada &lt;em&gt;RingTu&lt;/em&gt;, el tema era que no me
resultaba atractivo, así que en ese momento acepté la oferta de 4geeks.&lt;/p&gt;
&lt;p&gt;El primer día en 4geeks, me informan acerca del proyecto que iba a
desarrollar, "vas a hacer uno de los startups de Wayra, es una central
telefónica en la nube" y yo "¿RingTu?", "sí ese mismo", vaya, al parecer
hasta se las arregló para que desde 4geeks desarrollara su startup,
jajajajajajaja.&lt;/p&gt;
&lt;p&gt;Básicamente lo que debía hacer era unos wrappers para unos servicios web
que ellos consumen, ese era sólo el inicio del proyecto, pensé que sería
divertido, ya había hecho wrappers para otros servicios web, y en Python
es muy fácil hacer clientes para servicios web, sin importar si hablan
JSON o XML o algún protocolo propio, la cosa se puso esotérica cuando vi
que todos los URL de los servicios con los que iba a trabajar terminaban
en .wsdl.&lt;/p&gt;
&lt;h1&gt;REST... NO! vas a usar SOAP&lt;/h1&gt;
&lt;p&gt;¿SOAP?, con el boom de REST ¿quién usa SOAP?, en fin, ¿qué tan difícil
puede ser?, en Java es realmente fácil escribir clientes y servicios web
usando SOAP y en Python no debe ser la excepción, hay librerías para
todo, dejé de hacerme preguntas acerca del sentido de la vida, el
universo y todo lo demás y puse manos a la obra a investigar alguna
buena librería que me facilitara el trabajo.&lt;/p&gt;
&lt;p&gt;Luego de unos minutos leyendo en &lt;em&gt;StackOverflow&lt;/em&gt;, vi que al parecer suds
era la mejor opción, no se veía tan abandonada y, comparada a las demás
opciones, tenía una documentación decente.&lt;/p&gt;
&lt;h2&gt;Instalando suds&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install suds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recuerden que siempre es buena práctica trabajar con virtualenvs y,
además, es muy buena opción el hecho de utilizar virtualenvwrapper para
gestionarlos.&lt;/p&gt;
&lt;h2&gt;Empezando a desarrollar tu cliente SOAP&lt;/h2&gt;
&lt;p&gt;Una vez que tenemos suds ya instalado, es sólo cuestión de empezar a
utilizarla, para hacer clientes, que es de lo que hablaré en este post,
sólo nos interesa la clase definida en &lt;em&gt;suds.client.Client&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;SOAP 101&lt;/h3&gt;
&lt;p&gt;Si repasamos un poco de teoría acerca de los servicios web sobre el
protocolo SOAP, veremos que se convirtió en la capa subyacente para
servicios complejos basados en WSDL, que es una manera de especificar
los objetos y métodos que expone un servicio web y a los que el cliente
puede tener acceso. WSDL es un acrónimo que significa &lt;em&gt;Web Service
Description Language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Toda la definición de servicios web SOAP se hace en un documento WSDL,
que no es mas que un XML donde se define todo lo que este servicio
expone para ser consumido por sus clientes. De igual manera, el pase de
mensajes (soap messages) entre el cliente y el servidor, se hace en
formato XML.&lt;/p&gt;
&lt;p&gt;A continuación un ejemplo de documento WSDL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/ns/wsdl&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;xmlns:tns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.tmsws.com/wsdl20sample&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;xmlns:whttp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/wsdl/http/&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;xmlns:wsoap=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/wsdl/soap/&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;targetNamespace=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.tmsws.com/wsdl20sample&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Tipos Abstractos --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;types&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;xs:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xs=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.tmsws.com/wsdl20sample&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;targetNamespace=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com/wsdl20sample&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

             &lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; ... &lt;span class="nt"&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/xs:schema&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/types&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Interfaces abstractas --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Interface1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;fault&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;element=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:response&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;operation&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Opp1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/ns/wsdl/in-out&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;messageLabel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;In&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;element=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:request&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;messageLabel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Out&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;element=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:response&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/operation&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Interface concreta sobre HTTP --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;binding&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HttpBinding&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;interface=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:Interface1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/ns/wsdl/http&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;operation&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:Get&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;whttp:method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Interface concreta sobre SOAP --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;binding&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SoapBinding&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;interface=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:Interface1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/ns/wsdl/soap&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;wsoap:protocol=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2003/05/soap/bindings/HTTP/&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;wsoap:mepDefault=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2003/05/soap/mep/request-response&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;operation&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:Ge99t&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/binding&amp;gt;&lt;/span&gt;


    &lt;span class="c"&gt;&amp;lt;!-- Endpoints que ofrecen el servicio --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Service1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;interface=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:Interface1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HttpEndpoint&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:HttpBinding&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com/rest/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;endpoint&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SoapEndpoint&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tns:SoapBinding&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com/soap/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La sección &lt;em&gt;types&lt;/em&gt; describe los tipos de dato a los que da soporte el
servicio web que se está describiendo. Las &lt;em&gt;interfaces&lt;/em&gt;, definen un
servicio como tal, es decir, las operaciones que pueden ser realizadas y
los mensajes que son soportados para realizar cada operación. Los
&lt;em&gt;bindings&lt;/em&gt; especifican la interface y cómo deben ser pasados los
mensajes e incluso el protocolo que debe ser utilizado para el
transporte. Finalmente, los &lt;em&gt;endpoints&lt;/em&gt;, definen los puntos de conexión
con el servicio web.&lt;/p&gt;
&lt;p&gt;Por otra parte, un mensaje SOAP debería verse de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    POST /InStock HTTP/1.1
    Host: www.example.org
    Content-Type: application/soap+xml; charset=utf-8
    Content-Length: 299
    SOAPAction: &amp;quot;http://www.w3.org/2003/05/soap-envelope&amp;quot;

    &lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;soap:Envelope&lt;/span&gt; &lt;span class="na"&gt;xmlns:soap=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2003/05/soap-envelope&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;soap:Header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/soap:Header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;soap:Body&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;m:GetStockPrice&lt;/span&gt; &lt;span class="na"&gt;xmlns:m=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.org/stock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;m:StockName&amp;gt;&lt;/span&gt;IBM&lt;span class="nt"&gt;&amp;lt;/m:StockName&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/m:GetStockPrice&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/soap:Body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/soap:Envelope&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un mensaje, el &lt;em&gt;envelope&lt;/em&gt; es lo que identifica el XML como un mensaje
SOAP, el &lt;em&gt;header&lt;/em&gt; contiene información de encabezado, como por ejemplo,
llaves de autenticación o tokens de acceso. Finalmente, el &lt;em&gt;body&lt;/em&gt; o
cuerpo del mensaje, es el que contiene el mensaje como tal que se está
enviando, ya sea en solicitud o respuesta del servicio.&lt;/p&gt;
&lt;p&gt;En este caso, se está invocando una función remota &lt;em&gt;GetStockPrice&lt;/em&gt;
definida en un namespace &lt;em&gt;m&lt;/em&gt; del wsdl que describe este servicio. A esta
función remota se le está enviando un argumento llamado &lt;em&gt;StockName&lt;/em&gt; y el
valor de este argumento es &lt;em&gt;IBM&lt;/em&gt;, el servicio debería retornar el precio
del producto cuyo &lt;em&gt;StockName&lt;/em&gt; sea &lt;em&gt;IBM&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Inicializando el cliente SOAP consumiendo el WSDL del servicio&lt;/h2&gt;
&lt;p&gt;Para que pueda darse el intercambio de información entre un cliente y un
servidor SOAP, ambos deben tener conocimiento de lo que está definido en
el descriptor del servicio, es decir, ambos deben tener acceso al WSDL,
es por ello que lo usual es que el proveedor del servicio web exponga el
documento en un URL accesible.&lt;/p&gt;
&lt;p&gt;Para este tutorial, usaremos este servicio web:
&lt;a href="http://www.webservicex.com/globalweather.asmx?WSDL"&gt;http://www.webservicex.com/globalweather.asmx?WSDL&lt;/a&gt;, que es un servicio
web de clima. Acá:
&lt;a href="http://www.service-repository.com/operation/operations?id=4"&gt;http://www.service-repository.com/operation/operations?id=4&lt;/a&gt; podemos
observar las operaciones y sus parámetros en un formato amigable al
humano :-).&lt;/p&gt;
&lt;p&gt;Lo primero es, en nuestro caso, construir una instancia de
suds.client.Client que tenga conocimiento del WSDL que describe el
servicio que vamos a usar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;suds.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.webservicex.com/globalweather.asmx?WSDL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Listo, ya tenemos un cliente SOAP listo para consumir el servicio desde
Python.&lt;/p&gt;
&lt;h2&gt;Utilizando el servicio SOAP via el cliente en Python&lt;/h2&gt;
&lt;p&gt;Lo que nos queda es revisar la documentación del servicio o, si no la
hay, el WSDL para ver cuáles objetos pueden ser pasados como mensajes,
construir el request e invocar el método remoto, para ello nos
interesan: Client.factory y Client.service.&lt;/p&gt;
&lt;p&gt;Por ejemplo, obtengamos el tiempo para Caracas - Venezuela:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tns:GetWeather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CityName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Caracas&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CountryName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Venezuela&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetWeather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Un vistazo a suds, por dentro&lt;/h2&gt;
&lt;p&gt;Explorando la documentación o el WSDL veremos que
hay un objeto llamado &lt;em&gt;GetWeather&lt;/em&gt; definido en el namespace &lt;em&gt;tns&lt;/em&gt;, este
objeto tiene dos campos &lt;em&gt;string&lt;/em&gt;: &lt;em&gt;CityName&lt;/em&gt; y &lt;em&gt;CountryName&lt;/em&gt;, también,
si vemos la definición de la respuesta en el WSDL, podremos observar que
es un texto plano (es decir, viene un objeto primitivo &lt;em&gt;string&lt;/em&gt; como
SOAPResponse). Vamos a ver cómo maneja suds ambos casos:&lt;/p&gt;
&lt;p&gt;En el caso del &lt;code&gt;request&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;instance&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetWeather&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="n"&gt;CityName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Caracas&amp;quot;&lt;/span&gt;
       &lt;span class="n"&gt;CountryName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Venezuela&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, el &lt;code&gt;response&lt;/code&gt; se ve de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;suds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-16&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CurrentWeather&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Caracas&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Maiquetia&lt;/span&gt; &lt;span class="n"&gt;Aerop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Intl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Simon&lt;/span&gt; &lt;span class="n"&gt;Bolivar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Venezuela&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SVMI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;066&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Aug&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;PM&lt;/span&gt; &lt;span class="n"&gt;EDT&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2013.08&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;0100&lt;/span&gt; &lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Wind&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Wind&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Visibility&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;mile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Visibility&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SkyConditions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;partly&lt;/span&gt; &lt;span class="n"&gt;cloudy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;SkyConditions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DewPoint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;DewPoint&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RelativeHumidity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="o"&gt;%&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;RelativeHumidity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Pressure&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;29.88&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Hg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1012&lt;/span&gt; &lt;span class="n"&gt;hPa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Pressure&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;CurrentWeather&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, suds nos crea un objeto Python a partir de la definición
que obtuvo del WSDL en el caso del &lt;em&gt;request&lt;/em&gt; que se construye a partir
de la fábrica del cliente usando el objeto remoto &lt;em&gt;tns:GetWeather&lt;/em&gt; como
plantilla.&lt;/p&gt;
&lt;p&gt;En el caso del response, que está declarada como string, nos envía un
objeto suds.sax.text.Text, que puede ser tratado como un objeto string o
unicode Python normalmente.&lt;/p&gt;
&lt;p&gt;Suds, no sólo nos hace más fácil la interacción con servicios SOAP, sino
que también nos abstrae del hecho de que tratamos con objetos remotos,
convirtiendo todo a objetos Python por nosotros.&lt;/p&gt;
&lt;h2&gt;Autenticación en SOAP usando suds&lt;/h2&gt;
&lt;p&gt;En algunos casos es necesario autenticarse contra un servicio web para
poder utilizar sus métodos remotos, usualmente eso se hace a través de
un método público de autenticación que revisa los permisos y retorna un
token de acceso encapsulado en un objeto, este objeto debe colocarse en
el header de los requests que van dirigidos a los métodos privados.&lt;/p&gt;
&lt;p&gt;Debido a que no conseguí ningún servicio web que me permitiera hacer un
ejemplo de esto, simplemente haré un ejemplo &lt;em&gt;dummy&lt;/em&gt; de cómo sería en
código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;suds.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

    &lt;span class="n"&gt;auth_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.servicio.com/authservice.wsdl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ns:AuthObjectRequest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MiUsuarioParaElServicio&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MiClaveSuperSegura&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;auth_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAccessToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.servicio.com/otras_cosas.wsdl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soapheaders&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;auth_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Algunas veces, basta sólo con un objeto que contenga el usuario y el
password para el servicio (como el request de este ejemplo) en el
soapheaders del client y listo.&lt;/p&gt;
&lt;h2&gt;Agregando datos adjuntos en SOAP utilizando suds, claro que se puede!&lt;/h2&gt;
&lt;p&gt;La única desventaja que vi al trabajar con suds es que no viene con
soporte nativo para attachments, sin embargo, es relativamente fácil
añadir esta funcionalidad en &lt;a class="reference external" href="https://gist.github.com/iferminm/6265400"&gt;este
gist&lt;/a&gt;
podemos ver el código para hacerlo.&lt;/p&gt;
&lt;p&gt;La manera de utilizarlo es la siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;suds.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;soap_attachments&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_soap_attachment&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.servicio.com/wsdl/servicio.wsdl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/user/music/panama.mp3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mime_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;audio/mpeg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;bin_param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mime_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ns0:RequestConAttachment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;iferminm&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;with_soap_attachment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subir_pista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Básicamente lo que se hace es leer los bytes que conforman el archivo y
colocarlos en el cuerpo del mensaje SOAP (eso hace
with_soap_attachment), lo único que hay que saber acá es que el
endpoint (que se ve como parámetro en la llamada a
with_soap_attachment) es el punto de conexión al servicio web
especificado en el WSDL.&lt;/p&gt;
&lt;p&gt;De esta manera, colocamos un archivo adjunto al mensaje SOAP para que
sea subido al servidor vía SOAP.&lt;/p&gt;
&lt;h1&gt;Lecturas recomendadas:&lt;/h1&gt;
&lt;p&gt;Para más información recomiendo revisar la documentación de la librería
&lt;a class="reference external" href="https://github.com/suds-community/suds"&gt;acá&lt;/a&gt;, 
sin embargo, para hacer clientes para servicios SOAP básicos, con este 
tutorial debería ser suficiente.&lt;/p&gt;</content><category term="Español"></category><category term="python"></category><category term="soap"></category><category term="soa"></category><category term="suds"></category></entry><entry><title>Mi experiencia en el PyConVE 2012 y otros cuentos</title><link href="//iffm.me/mi-experiencia-en-el-pyconve-2012-y-otros-cuentos.html" rel="alternate"></link><published>2012-11-18T00:00:00+04:00</published><updated>2012-11-18T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2012-11-18:/mi-experiencia-en-el-pyconve-2012-y-otros-cuentos.html</id><summary type="html">&lt;p&gt;Bueno, ya ha pasado una semana y alguito desde que terminó la primera
Conferencia del Lenguaje Python de Venezuela (PyConVE), he tenido algo
de tiempo para reflexionar y pensar acerca de varias cosas que me
ocurrieron antes del evento, es decir, mientras se estaba organizando,
durante el evento y después …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bueno, ya ha pasado una semana y alguito desde que terminó la primera
Conferencia del Lenguaje Python de Venezuela (PyConVE), he tenido algo
de tiempo para reflexionar y pensar acerca de varias cosas que me
ocurrieron antes del evento, es decir, mientras se estaba organizando,
durante el evento y después del mismo, es decir, los días siguientes a
que la conferencia finalizó.&lt;/p&gt;
&lt;h2&gt;¿Cómo comenzó?&lt;/h2&gt;
&lt;p&gt;Creo que es justo &lt;em&gt;echar el cuento&lt;/em&gt; de cómo surgió la idea de organizar
un PyCon en Venezuela, algo que para muchos, dentro de la comunidad
incluso, resultaba una locura hace un par de años.&lt;/p&gt;
&lt;p&gt;Todo comenzó por allá en febrero de 2011, yo empezaba mis pasantías
cortas de la Universidad en &lt;a href="http://vauxoo.com"&gt;Vauxoo&lt;/a&gt;,
me iniciaba en Python con aquel trabajo, era toda una nueva
manera de programar y me encantaba, por referencia de Nhomar Hernández
terminé metido en la lista python-caracas y, posteriormente, en la de
Python Venezuela en coactivate. Recuerdo algunos mensajes en la lista de
python-caracas se estaba hablando de que sería una buena idea organizar
un &lt;em&gt;Día Python&lt;/em&gt; para vernos las caras, yo era joven e ingenuo, me ofrecí
para organizarlo y en marzo de 2011 tuvimos nuestro primer &lt;em&gt;PyDay
Caracas&lt;/em&gt;, en el auditorio de la biblioteca de la Universidad Católica
Andrés Bello.&lt;/p&gt;
&lt;p&gt;Luego de ese primer &lt;em&gt;PyDay&lt;/em&gt;, que se repitió en Mérida unos días después,
Francisco Palm decía por la lista que se debería aprovechar el impulso
para organizar algo más grande: un &lt;em&gt;PyCon&lt;/em&gt;. La idea, por esos días, no
caló mucho entre la gente de la comunidad, las cosas se fueron enfriando
poco a poco y con el tiempo, sólo había uno que otro mensaje ocasional
en la lista y nos veíamos una vez cada alineación planetaria.&lt;/p&gt;
&lt;p&gt;Luego, por allá en diciembre de 2012, conversando con Francisco Palm, la
idea de un &lt;em&gt;PyCon&lt;/em&gt; no me pareció tan descabellada, había posibles
patrocinantes, la sede podría ser la UCAB, se asomaba la idea de invitar
ponentes internacionales, yo por mi parte, acababa de renunciar en
&lt;a href="http://vauxoo.com"&gt;Vauxoo&lt;/a&gt; para dedicarme a mi
tesis de grado, entonces, también trabajaba en mi tesis, seguía siendo
joven e ingenuo y acepté lanzarme de frente con la organización del
evento.&lt;/p&gt;
&lt;h2&gt;El comienzo&lt;/h2&gt;
&lt;p&gt;Justo empezando, nos dividimos un poco las tareas, decidimos que el
evento sería en Caracas y que la sede sería la Universidad Católica
Andrés Bello, al ser &lt;em&gt;casi egresado&lt;/em&gt; de allí, ya se cómo se mueven las
cosas dentro, conozco a varias autoridades y se también con quién hablar
o dónde dirigirme.&lt;/p&gt;
&lt;p&gt;Había algo que para mi resultaba vital, tener apoyo de mi Escuela, la
Escuela de Ingeniería Informática de la UCAB. Lamentablemente, aunque el
Prof. Ricardo Casanova tenía instrucciones de apoyarme en lo que
pidiera, no hizo más que decirme que "los auditorios y los laboratorios
no pueden reservarse con tanta antelación", de resto, resolví
escribiéndole a las unidades funcionales correspondientes y reservando
laboratorios y el auditorio "con mucha antelación". Me hubiera gustado
contar con un mayor apoyo por parte de mi Escuela, pero supongo que
aquello de "nadie es profeta en su tierra" es cierto.&lt;/p&gt;
&lt;p&gt;Una vez asegurados los espacios para alojar el evento, me dediqué a
buscar ponentes, ya había unos nacionales más que confirmados a quienes
no había siquiera que preguntarles: Francisco Palm, Nhomar Hernández,
Carlos Gustavo Ruíz, Carlos Zager y Juan Hernández, pero para atraer más
personas al evento, hacían falta ponentes internacionales, me dediqué a
escribirle a &lt;strong&gt;Guido Van Rossum&lt;/strong&gt; y a &lt;strong&gt;Wesley Chun&lt;/strong&gt; a ver si estarían
interesados en participar, eso sí, teniendo presente que tocar la puerta
no es entrar.&lt;/p&gt;
&lt;p&gt;De parte de Guido, obtuve una respuesta negativa, él dice que prefiere
no viajar porque es malo para su familia y es totalmente entendible, ya
tiene su agenda y va al &lt;em&gt;PyConUS&lt;/em&gt; y al &lt;em&gt;EuroPython&lt;/em&gt; casi exclusivamente.&lt;/p&gt;
&lt;p&gt;Por su parte Wesley también me dijo que no, sin embargo me facilitó una
larga lista de contactos, me puso en contacto con José Montes de Oca
(venezolano en Google) y me pidió que lo mantuviera al tanto del evento.
Gracias a Wesley Chun, pude contactar con Facundo Batista y Érico
Andrei, los dos ponentes &lt;strong&gt;internacionales&lt;/strong&gt; del primer &lt;em&gt;PyConVE&lt;/em&gt;, la
invitación incluía &lt;strong&gt;pasaje y hospedaje&lt;/strong&gt; en Caracas, ambos aceptaron y
yo, en ese momento, &lt;strong&gt;no&lt;/strong&gt; tenía patrocinantes.&lt;/p&gt;
&lt;h2&gt;Tomando forma y sintiendo la presión&lt;/h2&gt;
&lt;p&gt;Bien, en enero ya tenía cuatro cosas: una fecha para el &lt;em&gt;PyConVE&lt;/em&gt;, dos
invitados internacionales &lt;strong&gt;confirmados&lt;/strong&gt; (Facundo y Érico), un invitado
internacional &lt;strong&gt;por confirmar&lt;/strong&gt; (José Montes de Oca) y la preocupación
de conseguir el dinero para cumplir la promesa del pasaje y el
alojamiento en Caracas para los invitados, bastante ¿no?&lt;/p&gt;
&lt;p&gt;Empecé a escribir a mediados de enero a la Escuela de Ingeniería
Informática (EII) para pedirles &lt;strong&gt;apoyo&lt;/strong&gt; en la logística interna,
especialmente la reserva de los auditorios, la Prof. Susana García,
directora de la EII, designó al Prof. Ricardo Casanova para que me
ayudara en lo que fuera necesario. Procedí entonces a contactarlo para
la reserva del auditorio y los laboratorios, su respuesta fue, en
resumen, "no puedes reservar &lt;em&gt;con tanta antelación&lt;/em&gt; en este momento
estoy muy ocupado y no puedo", este personaje y yo tenemos en el pasado
un problema originado por una discusión &lt;em&gt;de esos temas religiosos&lt;/em&gt; Mac
vs Linux del que, aparentemente, no ha podido sobreponerse.&lt;/p&gt;
&lt;p&gt;Dada la negativa de apoyo o, más bien, intento de retrasarme las cosas,
decidí contactar directamente a la Dirección del Cultura y a la
Dirección de Tecnologías de Información (DTI) para reservar los
espacios. Como era de esperarse, todo fluyó con normalidad y ya a
finales de enero tenía algo mas: el Auditorio Hermano Lanz y los
laboratorios A613 y A553 de la UCAB &lt;strong&gt;reservados&lt;/strong&gt; para albergar el
&lt;em&gt;PyConVE&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Las cosas se durmieron un poco hasta finales de febrero, que los
organizadores de &lt;em&gt;PyConAR&lt;/em&gt; lanzaron su página web con el llamado a
charlas, inscripciones, información del evento, invitados
internacionales y demás información del evento. Acá no teníamos siquiera
un &lt;em&gt;En Construcción&lt;/em&gt; y, en pocas palabras, &lt;strong&gt;me asusté&lt;/strong&gt; (sintiendo la
presión). Corrí a la lista &lt;em&gt;Conferences&lt;/em&gt; de &lt;em&gt;python.org&lt;/em&gt; para pedir
ayuda con el dominio oficial &lt;em&gt;ve.pycon.org&lt;/em&gt; y, mientras, compré el
dominio &lt;em&gt;pyconve.com&lt;/em&gt; a través de &lt;em&gt;GoDaddy&lt;/em&gt;. Aprovecho acá para
agradecerle a M.A. Lemburg por su ayuda configurando el dominio.&lt;/p&gt;
&lt;p&gt;Ya que las cosas no fluían con la velocidad que quería con la página
web, pedí ayuda en la oficina, en ese momento trabajaba en
&lt;a href="http://zava.com.ve"&gt;Zava&lt;/a&gt;, nos dedicamos 4
desarrolladores a sacar la página y en una tarde ya teníamos algo visual
y semi-funcional, al final de la semana ya teníamos una página bastante
completa y &lt;em&gt;apta para el público&lt;/em&gt;, la hospedamos en el VPS de la empresa
y listo. Posteriormente la empresa me dejaría tiempo para atender bugs y
añadir características nuevas, esto fue en abril.&lt;/p&gt;
&lt;h2&gt;Empezando a tranquilizarme&lt;/h2&gt;
&lt;p&gt;Conversando con Francisco, me di cuenta de que las cosas no iban tan
atrasadas como pensé, él había conseguido patrocinio para afiches, agua
y almuerzos para los organizadores y ponentes durante el evento, yo
había conseguido ponentes internacionales, sede y página web así que lo
demás, iría llegando poco a poco.&lt;/p&gt;
&lt;p&gt;Todavía tenía una preocupación más: &lt;strong&gt;LOS PASAJES&lt;/strong&gt;, me dispuse a
escribirle a Nhomar Hernández a ver si desde Vauxoo o algún
cliente/socio de negocios podrían patrocinar los pasajes. La respuesta
fue afirmativa y, ya a mediados de septiembre, estaba enviándole a Érico
y a Facundo sus tickets electrónicos, en cuanto a José, el ponente de
Google, tenía tiempo sin noticias hasta que confirmó, pero para cuando
confirmó los pasajes habían subido de precio de manera astronómica y,
difícilmente, un patrocinante iba a querer pagarlo, así que llegamos al
acuerdo de que sería por videoconferencia a través de un &lt;em&gt;Google
HangOut&lt;/em&gt;, escribí al DTI para que realizaran las configuraciones
pertinentes.&lt;/p&gt;
&lt;p&gt;Mientras tanto, teníamos unas 35 ponencias inscritas y alrededor de 150
personas registradas para asistir al evento, esto me tenía súper
contento, sinceramente no esperaba tanta receptividad. Francisco
consiguió organizar un evento en el CIDA en Mérida y logró que un
patrocinante pagara pasaje Caracas - Mérida para que Facundo participara
en ese evento, el &lt;em&gt;PyTatuy&lt;/em&gt;. Todo parecía ir viento en popa.&lt;/p&gt;
&lt;h2&gt;Imprevistos, imprevistos, IMPREVISTOS!!!&lt;/h2&gt;
&lt;p&gt;Bueno, nada es perfecto, los imprevistos en este tipo de cosas están a
la orden del día, recordemos que
&lt;a href="http://es.wikipedia.org/wiki/Ley_de_Murphy"&gt;Murphy&lt;/a&gt;
existe. Previendo que, quizás, no llegara el agua a tiempo el
primer día. Facundo decidió venir con su familia, ahora debía buscarle
una habitación en un Hotel cerca de la Universidad, tienen un hijo
pequeño, así que debía ser un buen hotel y, además, debía buscar un
patrocinante para eso, la habitación no se concretó sino hasta tres días
antes de que llegaran el patrocinante fue
&lt;a href="http://echandocodigo.com"&gt;EchandoCódigo&lt;/a&gt; (Gracias
Osledy Bazó!!!).&lt;/p&gt;
&lt;p&gt;En la madrugada del 27 de octubre recibo una llamada a mi celular, era
un número internacional y atendí. Del otro lado decían &lt;em&gt;"Ché ¿Israel?,
Facundo Batista aquí, estoy en el aeropuerto y no me dejan abordar
acá"&lt;/em&gt;, había un problema con el nombre, para enterarse del cuento
completo, click
&lt;a href="http://www.taniquetil.com.ar/plog/post/1/583"&gt;acá&lt;/a&gt;.
Inmediatamente llamé a Nhomar a ver si estaba despierto (y
si no, pues que se despertara), estuvimos conversando un rato y luego
Facundo me informó que ya le habían liberado los boletos, pero que era
necesario corregir los boletos para el regreso.&lt;/p&gt;
&lt;p&gt;El 27 de octubre en la noche, voy con Giselle, mi novia, al aeropuerto a
buscar a Facundo y familia, pero al llegar, me consigo únicamente a
Facundo, la familia se había quedado varada en Lima, les habían
cancelado el segundo tramo del viaje. Bueno, subimos a Caracas y lo dejé
en el Hotel para que pudiera descansar y al día siguiente ya se
resolvería lo del vuelo de la familia, afortunadamente llegaron en
domingo 28 al mediodía.&lt;/p&gt;
&lt;p&gt;Francisco Palm había quedado en traer los afiches para pegarlos por la
universidad cuando viniera a Caracas con Facundo luego del &lt;em&gt;PyTatuy&lt;/em&gt;,
pero los dejó en el carro y el carro lo dejó en Mérida (sorry!, tenía
que contarlo, no lo tomes a descarga, jajajajaja).&lt;/p&gt;
&lt;p&gt;Con respecto a Érico, todo fluyó de maravilla, se quedó en mi casa,
comió arepas, aprendió a moverse en Metro, andaba solo por la ciudad!!!,
eso me preocupaba enormemente, pero luego entendí que él es muy
independiente cuando viaja.&lt;/p&gt;
&lt;p&gt;Hubo cancelaciones tardías: Ernesto Crespo sufrió una caída que le
imposibilitó viajar (espero se encuentre bien ya), Roldan Vargas tampoco
podría venir a Caracas, Edwind Ocando iba a ser operado y tuvo que
cancelar también, Efraín Valles no pudo venir por razones laborales.
Hubo otras más, pero no recuerdo, afortunadamente varios miembros
saltaron al rescate, Gerardo Curiel cubrió varias charlas canceladas con
temas interesantísimos de desarrollo web y vim para pythonistas,
Leonardo Caballero cubrió una de las charlas de Plone que fueron
canceladas y Érico Andrei también dió una charla adicional muy orientada
al público estudiantil.&lt;/p&gt;
&lt;p&gt;Bien, llegó el primer día del &lt;em&gt;PyConVE&lt;/em&gt; y, como era de esperarse, fue un
desastre, había una cola insoportable en la Av. Páez, ergo, llegué tarde
con Érico, Gigi (bueno, Giselle, mi novia) ya había llegado y me ayudó a
ir organizando todo, ya estaban Sebastián Magrí y Leonardo Caballero en
la UCAB, Rafael Andara (del DTI) me había estado esperando para darme
los datos de configuración para poder realizar la videoconferencia con
José Montes de Oca, muchísimas gracias a Gigi y a los muchachos por ir
alistando todo, el evento arrancó casi una hora y media tarde (perdonen
todos el retraso).&lt;/p&gt;
&lt;p&gt;Las aguas llegaron tarde (menos mal fui precavido), los almuerzos
también así que se convirtieron en la cena de varias personas
(incluyéndome).&lt;/p&gt;
&lt;p&gt;Vale acotar que pasé &lt;strong&gt;toda la semana&lt;/strong&gt; del PyCon enfermo del estómago y
sobreviviendo a base de Loperán y Alcaseltzer.&lt;/p&gt;
&lt;p&gt;El último día del evento, el DTI no me abrió los laboratorios porque no
tenían la llave y la oficina donde están no abre los sábados (mal!) y,
supuestamente, hay una persona los sábados que tiene las llaves pero ese
día no fue (terrible!!), por lo que todos los talleres de ese día (o la
mayoría) hubo que darlos como charlas relámpago en el Auditorio (una
manera de resolver y no quedar tan mal).&lt;/p&gt;
&lt;h2&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Bueno, luego del &lt;strong&gt;PyConVE&lt;/strong&gt;, aprendí muchísimas cosas en cuanto a
gestión de eventos y otras tantas de comunidad, sobre todo aprendí a
delegar, es imposible que una sola persona pueda hacerlo todo. Descubrí
que hay mucha gente valiosa dentro de la comunidad en quien se pueden
delegar cosas de manera muy confiable, &lt;a href="http://twitter.com/kadaba"&gt;Jin
Kadaba&lt;/a&gt;, &lt;a href="http://twitter.com/jackboot7"&gt;Luis Alberto
Santana&lt;/a&gt;, &lt;a href="http://twitter.com/carlosgr_arahat"&gt;Carlos
Gustavo Ruíz&lt;/a&gt;,
&lt;a href="http://twitter.com/macagua"&gt;Leonardo Caballero&lt;/a&gt;,
&lt;a href="http://twitter.com/sebasmagri"&gt;Sebastián Magrí&lt;/a&gt;,
&lt;a href="http://twitter.com/nhomar"&gt;Nhomar Hernández&lt;/a&gt;
(pero por supuesto!), &lt;a href="http://twitter.com/vladjanicek"&gt;Juan
Hernández&lt;/a&gt; (no
faltaba más), &lt;a href="http://twitter.com/mapologo"&gt;Francisco Palm&lt;/a&gt;.
y si olvido a alguien, pido disculpas.&lt;/p&gt;
&lt;p&gt;Hay aún mucho trabajo por hacer, es necesaria una figura legal para
poder recibir donaciones en calidad de patrocinio de una manera más
formal, actualmente estamos en eso en la comunidad, creo que el PyCon,
aunque bien fue algo arriesgado, fue un catalizador y un activador para
muchas personas dentro de la comunidad, está en nosotros no dejar que la
ola muera y continuar trabajando para llevar adelante nuestra comunidad,
muchas personas de otros estados quieren organizar &lt;em&gt;PyDays&lt;/em&gt;, personas
que antes no intervenían en la lista de la comunidad ahora son más
activas y sólo leí buenos comentarios del evento. Todo esto y, sobre
todo las dos primeras, con cosas que me hacen decir que &lt;strong&gt;valió la
pena&lt;/strong&gt; el esfuerzo, y &lt;strong&gt;lo volvería a hacer&lt;/strong&gt;. Perdonen si me extendí,
creo que este es el artículo más largo que he escrito en muchísimo
tiempo, pero eran demasiadas experiencias que quería compartir,
finalmente, muchísimas gracias a Facundo Batista y Érico Andrei por
participar, gracias a &lt;strong&gt;todos&lt;/strong&gt; los ponentes nacionales por apartar esos
tres días en sus agendas y movilizarse a la UCAB para nuestro &lt;strong&gt;primer&lt;/strong&gt;
&lt;em&gt;PyCon&lt;/em&gt;, a mi novia por apoyarme en mis locuras y a todos quienes
asistieron de Caracas y, sobre todo, del interior del país, GRACIAS
TOTALES!.&lt;/p&gt;</content><category term="Español"></category><category term="pycon"></category><category term="pyve"></category><category term="python"></category></entry></feed>