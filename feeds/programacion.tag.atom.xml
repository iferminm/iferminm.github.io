<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/dev/isra/blog/* - programación</title><link href="//iffm.me/" rel="alternate"></link><link href="//127.0.0.1:8000/feeds/programacion.tag.atom.xml" rel="self"></link><id>//iffm.me/</id><updated>2014-12-19T00:00:00+04:00</updated><entry><title>Cosas que he aprendido, Mixins</title><link href="//iffm.me/cosas-que-he-aprendido-mixins.html" rel="alternate"></link><published>2014-12-19T00:00:00+04:00</published><updated>2014-12-19T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-12-19:/cosas-que-he-aprendido-mixins.html</id><summary type="html">&lt;p&gt;A menudo nos ocurre que estamos programando y vemos que hay ciertos
métodos que se repiten en varias clases, esto es una señal de que ese
conjunto de métodos pueden abstraerse de alguna manera para no tener que
duplicar esa lógica, entonces, escribimos una clase base, con esos
métodos y …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A menudo nos ocurre que estamos programando y vemos que hay ciertos
métodos que se repiten en varias clases, esto es una señal de que ese
conjunto de métodos pueden abstraerse de alguna manera para no tener que
duplicar esa lógica, entonces, escribimos una clase base, con esos
métodos y luego simplemente la heredamos y todo cool.&lt;/p&gt;
&lt;p&gt;Cuando esto ocurre por segunda vez en un subconjunto de las clases
&lt;em&gt;hijas&lt;/em&gt;, pueden pasar dos cosas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ese conjunto de métodos pertenece al mismo dominio del problema, en
    cuyo caso, los colocamos en la clase padre que corresponda&lt;/li&gt;
&lt;li&gt;Ese conjunto de métodos resuelve otro tipo de problemas o es más
    bien algún tipo de utilidad pero debe estar en esa clase por
    alguna razón.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el segundo caso lo que uno tiende a hacer con lenguajes que soportan
herencia múltiple como Python es crear una nueva clase y agregarla a la
lista de clases padre de la clase en cuestión.&lt;/p&gt;
&lt;p&gt;Conforme nuestro programa va creciendo en complejidad, podemos
enfrentarnos al famoso problema del diamante de la herencia múltiple,
los mixins son una solución limpia y sencilla para evitar este tipo de
inconvenientes que son un dolor de cabeza para depurar y agregan
complicaciones innecesarias.&lt;/p&gt;
&lt;h2&gt;¿Qué es un Mixin?&lt;/h2&gt;
&lt;p&gt;Un Mixin es una clase que hereda de la clase por defecto, &lt;em&gt;object&lt;/em&gt; en el
caso de Python, y define un conjunto de métodos para agregar
comportamiento a alguna otra entidad. Un mixin por sí solo puede
resultar inútil, pero al combinarlos y agregarlos a una clase resultan
ser una herramienta muy potente que ayuda a la reutilización de código
sin ambigüedades y sin generar efectos colaterales.&lt;/p&gt;
&lt;h2&gt;Ejemplos&lt;/h2&gt;
&lt;p&gt;Bueno, basta de palabrería y manos al teclado.&lt;/p&gt;
&lt;p&gt;Supongamos que estamos desarrollando algo en &lt;em&gt;django&lt;/em&gt; y necesitamos que
el usuario sea capaz de dejar comentarios, esta vista debe ser invocable
vía ajax. Debo hacerlo de manera que pueda reusar el código pues se que
en el futuro habrá más vistas que deben ser "ajax friendly"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Comment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CommentForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommentCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Comment&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommentForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, es la implementación de lo que vendría siendo una vista
basada en clases normal y corriente para procesar un formulario,
validarlo y crear un nuevo registro de &lt;em&gt;Comment&lt;/em&gt;, sólo una cosa salta a
la vista: el &lt;em&gt;JSONResponseMixin&lt;/em&gt;. Veamos qué hace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y eso es todo, luego, si necesito hacer que alguna otra vista sea "ajax
friendly", simplemente tengo que hacer que herede del
&lt;em&gt;JSONResponseMixin&lt;/em&gt;. Algo importante acá es que si necesito serializar
objetos complejos, &lt;em&gt;json.dumps()&lt;/em&gt; no será suficiente, debería escribir
mi propio método para convertirlo en &lt;em&gt;JSON&lt;/em&gt; y enviarlo.&lt;/p&gt;
&lt;p&gt;Si te parece útil o interesante lo que escribo, suscríbete a mi lista de
correos en la caja que está a la derecha, tengo algunas cosas en mente
que estaré anunciando por esa vía. Gracias, de nuevo, por leerme.&lt;/p&gt;</content><category term="Español"></category><category term="programación"></category><category term="mixins"></category></entry><entry><title>Cosas que he aprendido, SOA</title><link href="//iffm.me/cosas-que-he-aprendido-soa.html" rel="alternate"></link><published>2014-12-06T00:00:00+04:00</published><updated>2014-12-06T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-12-06:/cosas-que-he-aprendido-soa.html</id><summary type="html">&lt;p&gt;Luego de algún tiempo desarrollando software, sea para web o escritorio,
uno realmente termina de entender aquello que nos decían en &lt;em&gt;Algoritmos
y Programación I&lt;/em&gt; de &lt;strong&gt;Divide y vencerás&lt;/strong&gt;, quizás en la Universidad uno
no lo aplica mucho, tienes 8 proyectos y 14 parciales en una semana y
tienes que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Luego de algún tiempo desarrollando software, sea para web o escritorio,
uno realmente termina de entender aquello que nos decían en &lt;em&gt;Algoritmos
y Programación I&lt;/em&gt; de &lt;strong&gt;Divide y vencerás&lt;/strong&gt;, quizás en la Universidad uno
no lo aplica mucho, tienes 8 proyectos y 14 parciales en una semana y
tienes que salir de todo lo más rápido posible, entonces terminas
escribiendo muchísimo terrible, quien sea inocente, que lance la primera
piedra. Incluso a veces en el trabajo por la presión de los &lt;em&gt;deadlines&lt;/em&gt;
uno termina tomando atajos para hacer la cosa funcionar y dejar un
comentario de estos que empiezan con &lt;strong&gt;TODO&lt;/strong&gt; o &lt;strong&gt;FIXME&lt;/strong&gt; para
arreglarlo luego o advertir al resto del equipo que ese bloque de código
debe ser arreglado o podría causar problemas más adelante.&lt;/p&gt;
&lt;p&gt;Lo primero que uno tiende a hacer es separar todo en funciones, tratar
de que cada función que se escribe haga una y sólo una cosa, sin efectos
colaterales, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta función, claramente, no hace una cosa, hace dos, escribe un texto
al archivo y luego lo cierra, esto es poco intuitivo, cualquiera
llamaría la función dos veces y, la segunda, seguramente ocurre una
excepción, lo ideal sería:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Renombrar la función a &lt;em&gt;write_to_file_and_close()&lt;/em&gt; o...&lt;/li&gt;
&lt;li&gt;Mucho mejor, simplemente cerrar el archivo en otra parte.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;¿Ven?, &lt;strong&gt;divide y vencerás&lt;/strong&gt;, nada difícil ¿no?&lt;/p&gt;
&lt;p&gt;Luego, conocemos las clases, los objetos y los paquetes (no, no esa
clase de paquetes, no sean mal pensados), entonces, empezamos encapsular
entidades en clases, cuyos objetos actuarán sobre los datos que maneja
el programa y cada clase tendrá una y sólo una tarea específica, esta
tarea la cumplirá porque todos y cada uno de los métodos que escribimos
para ella están relacionados entre sí y están diseñados para trabajar en
conjunto para lograr ese objetivo, es decir, tienen &lt;em&gt;alta cohesión&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Al mismo tiempo, estas clases, la agrupamos en &lt;em&gt;paquetes&lt;/em&gt; o &lt;em&gt;módulos&lt;/em&gt;,
cada uno de estos, cumple también una tarea específica que no afecta el
trabajo de los demás, es decir, tienen &lt;em&gt;bajo acoplamiento&lt;/em&gt;, tenemos,
normalmente, un módulo para acceso a datos, un módulo para la lógica
compleja del programa y otro para interactuar con la &lt;em&gt;Capa 8 de la red&lt;/em&gt;,
es decir, el usuario.&lt;/p&gt;
&lt;p&gt;Hasta ahora, vamos bien, todo dividido en módulos y así arquitectamos
nuestros sistemas por un largo tiempo, todo lo nuevo que hacemos, lo
encapsulamos en un módulo aparte que se puede importar, &lt;em&gt;y vio Dios que
era bueno&lt;/em&gt;, entonces nos permitió seguirlo haciendo así.&lt;/p&gt;
&lt;h2&gt;Construyendo un elefante&lt;/h2&gt;
&lt;p&gt;Si trabajamos mucho tiempo iterando sobre el mismo sistema, la tendencia
natural es que este crezca, entonces, la cantidad de módulos irá
creciendo cada vez más, así como también los recursos que consume y, si
todo sale bien, también crecerá el tráfico que tenemos que manejar,
entonces, poco a poco sólo un gran servidor se irá quedando corto, ¿cuál
es la solución natural?, escalar de manera horizontal y agregar más
servidores corriendo detrás de un balanceador de carga, pero recordemos
que estamos corriendo un sistema enorme con muchos módulos cargados en
memoria, se necesita un servidor grande (y probablemente caro) para
levantar algo tan pesado.&lt;/p&gt;
&lt;p&gt;Más allá de eso, empezamos a preguntarnos, ¿qué tanto se usa cada
módulo?, por ejemplo, tenemos un módulo de registro de usuarios pero, no
todos los usuarios que van a nuestra página, por ejemplo, necesitan
registrarse, sin embargo, ese módulo está cargado N veces, donde N es la
cantidad de servidores que tengamos sosteniendo nuestro monolito que,
además, seguramente seguirá creciendo cada vez más.&lt;/p&gt;
&lt;p&gt;Eso por un lado, por otro lado, por otro lado, cada vez que vamos a
liberar un feature nuevo, resolver un bug o simplemente cambiar un texto
en una plantilla, tenemos que hacer deploy de un sistema pesado en N
servidores, algo que puede tardar bastante tiempo y quizás causar
&lt;em&gt;downtime&lt;/em&gt; de algunos minutos, quizás perdiendo potenciales usuarios.&lt;/p&gt;
&lt;p&gt;Además, poco a poco hacer cambios en un &lt;em&gt;codebase&lt;/em&gt; tan grande, se vuelve
doloroso, es difícil de modificar, difícil de probar, difícil de escalar
y, por lo tanto, difícil de mantener.&lt;/p&gt;
&lt;h2&gt;¿Trabajo de hormigas?, ventajas&lt;/h2&gt;
&lt;p&gt;¿Qué pasaría si cada módulo lo convertimos en un proyecto aparte?, sí,
con su propio servidor y todo, tendríamos varios servicios que hacen una
sola cosa y, simplemente, tendríamos que escribir clientes para esos
servicios y utilizarlos cuando sea necesario y en el orden que sea
necesario, ¿qué ventajas tiene esto?&lt;/p&gt;
&lt;p&gt;Por un lado, usamos servidores más pequeños y si, por ejemplo, los
usuarios están subiendo muchas fotos, simplemente escalamos el "servicio
de gestión de fotos" y listo, es decir, agregamos un nuevo servidor y
eso debería soportar más tráfico. No creamos una instancia nueva de un
servidor enorme con, además, partes del sistema que no está siendo
usadas o que no están recibiendo tanto tráfico.&lt;/p&gt;
&lt;p&gt;Por otro lado, es más fácil conseguir errores, si falla el servicio de
pagos, sabemos que algo está mal con ese servicio pues, la única manera
de que algo llegue allí es a través de la interfaz HTTP que este
servicio expone. También agregar features nuevos se convierte en una
tarea fácil, no hay que modificar un proyecto enorme sino quizás agregar
un servicio nuevo e integrarlo. Resolver bugs se convierte también en
una tarea más fácil pues ya sabemos dónde está fallando y, a la hora de
hacer un release, si hay &lt;em&gt;downtime&lt;/em&gt; es sólo un servicio y los usuarios
prefieren un &lt;em&gt;En este momento no es posible completar tu solicitud,
intenta en unos minutos&lt;/em&gt; que un &lt;em&gt;En este momento estamos en
mantenimiento, regresa luego&lt;/em&gt;, al menos pueden seguir usando las otras
partes del sistema, ¿no?.&lt;/p&gt;
&lt;p&gt;Finalmente, permite que la plataforma sea políglota, es decir, si tienes
todo hecho en Ruby on Rails, por ejemplo, pero quieres tener el motor de
búsqueda con tecnologías de Web Semántica y, la mejor herramienta que
conseguiste fue integrar &lt;a href="https://jena.apache.org/"&gt;Jena&lt;/a&gt; con 
&lt;a href="http://clarkparsia.com/pellet/"&gt;Pellet&lt;/a&gt; como motor de inferencia y 
todo eso está en &lt;em&gt;Java&lt;/em&gt;, simplemente es un servicio más que expondrá 
unas interfaces para que el resto pueda usarlo, así que realmente 
no importa en qué esté escrito.&lt;/p&gt;
&lt;h2&gt;No todo es perfecto&lt;/h2&gt;
&lt;p&gt;Como todo en software, no hay balas de plata para matar problemas, cada
solución tiene también sus contra, algunos de los que he podido ver son
los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un request del usuario puede derivar en 50 o 60 requests internos a
    servicios, por lo que la velocidad de respuesta se aprecia, hay que
    tener en caché lo que se pueda e invalidar ese caché oportunamente
    para actualizarlo cuando sea necesario.&lt;/li&gt;
&lt;li&gt;Cuando el equipo es muy grande, no todos los desarrolladores conocen
    todos los servicios, siempre hay unos que saben más que otros y
    otros que saben mucho de algunos y nada de otros, es difícil
    mantener homogeneidad en el conocimiento acerca de todo el stack.&lt;/li&gt;
&lt;li&gt;Si un servicio no responde por alguna razón y las interfaces de los
    servicios son HTTP, ese request se pierde, por lo tanto no tendremos
    esos datos en el servicio que corresponda, así que si nuestro
    enfoque es optimista, el servicio que envió el request está contando
    con que todo salió bien, hay que pensar entonces en algún método que
    permita reintentar o, si falla la solicitud, tener un método de
    &lt;em&gt;fallback&lt;/em&gt; para estos casos, quizás una cola para que el otro
    servicio empiece a procesar cuando se despierte o, quizás, cambiar
    las llamadas HTTP por colas compartidas.&lt;/li&gt;
&lt;li&gt;Las complicaciones de tener múltiples servidores tras un balanceador
    de carga se multiplican por el número de servicios que tengamos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Buenas prácticas&lt;/h2&gt;
&lt;p&gt;Aplica todo lo que ya sabemos, pero hay que ser un poco más rigurosos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentación:&lt;/strong&gt; además del código, hay que documentar la API que
    expone el servicio que escribimos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tolerancia a fallos:&lt;/strong&gt; además de servidores redundantes, es
    necesario tener un método de recuperación de datos en caso que falle
    algún servicio y algo no llegue a la base de datos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pruebas:&lt;/strong&gt; probar cada servicio es fácil, un set de pruebas
    unitarias hace el trabajo bastante bien, la cosa se pone un poco más
    difícil con la pruebas de integración, es necesario contar con los
    servicios con los que se va a interactuar a la hora de ejecutar
    estas pruebas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy:&lt;/strong&gt; se hace vital contar con un sistema de integración
    continua, de otra manera todo se nos puede salir de las manos y se
    vuelve poco mantenible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoreo:&lt;/strong&gt; es necesario monitorear todos los servicios para
    conocer dónde están los cuellos de botella y optimizar lo que sea
    necesario o tomar acciones para solventarlo. Además de saber cuándo
    un servicio está caído antes de que los usuarios empiecen
    a quejarse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como todo, el nirvana no es solamente orientado a servicios, hay muchas
otras maneras de arquitectar sistemas y todas son correctas dependiendo
de las condiciones y el contexto que las rodean.&lt;/p&gt;
&lt;p&gt;Acá dejo &lt;a href="http://queue.acm.org/detail.cfm?id=1142065"&gt;una entrevista&lt;/a&gt; a uno de mis héroes
personales sobre este tema, Werner Vogels, CEO de Amazon.&lt;/p&gt;</content><category term="Español"></category><category term="programacion"></category><category term="buenas prácticas"></category></entry><entry><title>Cosas que he aprendido: Descriptores</title><link href="//iffm.me/cosas-que-he-aprendido-descriptores.html" rel="alternate"></link><published>2014-12-01T00:00:00+04:00</published><updated>2014-12-01T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-12-01:/cosas-que-he-aprendido-descriptores.html</id><summary type="html">&lt;p&gt;Bueno, llevo ya unos años dedicado casi 100% a desarrollo web con
&lt;em&gt;Python&lt;/em&gt;, unos años en los que he aprendido muchas cosas sobre el
lenguaje y, por un momento, pensé que sabía suficiente, pero cuando uno
empieza a pensar eso es peligroso, al final, nunca se sabe suficiente y
siempre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bueno, llevo ya unos años dedicado casi 100% a desarrollo web con
&lt;em&gt;Python&lt;/em&gt;, unos años en los que he aprendido muchas cosas sobre el
lenguaje y, por un momento, pensé que sabía suficiente, pero cuando uno
empieza a pensar eso es peligroso, al final, nunca se sabe suficiente y
siempre hay mucho por aprender.&lt;/p&gt;
&lt;p&gt;El año pasado, durante mi entrevista para entrar en
&lt;a class="reference external" href="http://dubizzle.com"&gt;dubizzle&lt;/a&gt; aprendí un
concepto nuevo que incluye python y que es súper interesante, podría
resultar útil para alguien y, sino, escribiendo sobre ello me ayudo a mi
mismo a recordarlo y a entenderlo mejor.&lt;/p&gt;
&lt;p&gt;Python, incluye una cantidad enorme de características en su biblioteca
estándar que nos ayudan a resolver problemas comunes del día a día y
ofrecer interfaces más intuitivas y pythónicas, tal el es caso de las
propiedades o &lt;em&gt;properties&lt;/em&gt;. Hablaré un poco de ellas porque son claves
para entender el concepto de descriptores o &lt;em&gt;descriptors&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;Básicamente, es una función que convierte en un &lt;em&gt;getter&lt;/em&gt; un atributo que
queremos que sea de sólo lectura, pero su uso más común es retornar
manejar el acceso o controlar el valor de atributos que dependen del
valor de otros atributos del mismo objeto y proveer una interfaz de
acceso más pythónica a dicho atributo, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# declaración de atributos&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# inicialización de lo que sea que haga falta&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_be_used&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_expired&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_consumed&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_expired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expiration_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_consumed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used_credits&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_credits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, se simplifica un poco el acceso a estos atributos, se
encapsula la llamada a la función correspondiente y se da una interfaz
como si se tratara de un atributo, escondiendo la complejidad "tras
bastidores", de otra manera, las llamadas a las funciones serían
explícitas y el código se vería más complejo de lo que en realidad es.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo un poco más complejo y en el que los descriptores
pudieran ayudar a simplificar la implementación manteniendo una interfaz
simple.&lt;/p&gt;
&lt;p&gt;Digamos que necesitamos escribir una clase que representa una instancia
de libro en una casa editorial, todo bajo las siguientes reglas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cada libro tiene un título, cuya longitud máxima y mínima son 500 y
    10 respectivamente&lt;/li&gt;
&lt;li&gt;Cada libro tiene un precio, que debe ser mayor que cero&lt;/li&gt;
&lt;li&gt;Cada libro tiene un número de existencias en inventario, que debe
    ser mayor que cero&lt;/li&gt;
&lt;li&gt;Cada libro tiene un año de publicación, que sebe ser un número mayor
    que 1300 (sí, ya se que hay mejores manera de hacer esto)&lt;/li&gt;
&lt;li&gt;Cada libro tiene un nombre de autor, cuya longitud máxima y mínima
    debe ser 50 y 10, respectivamente&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto puede implementarse fácilmente usando &lt;em&gt;properties&lt;/em&gt; y &lt;em&gt;setters&lt;/em&gt;,
veamos como&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;TITLE_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="n"&gt;TITLE_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;AUTHOR_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="n"&gt;AUTHOR_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;PUB_YEAR_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1300&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;


    &lt;span class="c1"&gt;# cool&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt;

    &lt;span class="nd"&gt;@title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TITLE_MIN&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TITLE_MAX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# otra vez...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt;

    &lt;span class="nd"&gt;@author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_MIN&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_MAX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# Bueno, ya se hacen una idea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Habría que hacer lo mismo para cada atributo/propiedad, la interfaz es
simple, pero la implementación no es elegante, se ve un poco sucia y
repetitiva, sin embargo, es válida.&lt;/p&gt;
&lt;h2&gt;Descriptores&lt;/h2&gt;
&lt;p&gt;Los descriptores vienen a resolver este problema, básicamente un
descriptor es una &lt;em&gt;property&lt;/em&gt; encapsulada en una clase que nos permite
realizar las validaciones necesarias de manera simple. Algo así como un
"&lt;em&gt;property&lt;/em&gt; con esteroides", veamos de qué se trata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_default&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_default&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_default&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Longitud Inválida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Valor menor de lo permitido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto, nuestra clase &lt;em&gt;Book&lt;/em&gt; cambiaría de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Los descriptores siempre se colocan al nivel de la clase&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinMaxLengthString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinIntegerValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inventory&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una implementación mucho más limpia y legible, veamos cómo funciona&lt;/p&gt;
&lt;p&gt;Supongamos que ya hemos hecho algo como&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;La Muerte de Honorio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Miguel Otero Silva&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1963&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Al ejecutar, por ejemplo &lt;em&gt;b.year = 1200&lt;/em&gt;, se va a invocar realmente
    &lt;em&gt;b.year.__set__(b, 1200)&lt;/em&gt; realizando las validaciones necesarias&lt;/li&gt;
&lt;li&gt;Al ejecutar, por ejemplo, &lt;em&gt;t = b.title&lt;/em&gt;, se va a invocar realmente
    &lt;em&gt;b.title.__get__(m, Book)&lt;/em&gt; retornando el valor solicitado&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Se puede hacer lo que sea en los métodos &lt;em&gt;__get__()&lt;/em&gt; y
&lt;em&gt;__set__()&lt;/em&gt; y, además, se puede definir otro método
&lt;em&gt;__delete__()&lt;/em&gt; que es invocado cuando se borra el descriptor, por
ejemplo &lt;em&gt;del(b.author)&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Posible puesta de torta&lt;/h3&gt;
&lt;p&gt;Hay dos cosas que llaman la atención en los ejemplos de los
descriptores:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;La primera de ellas es que &lt;strong&gt;se colocan a nivel de la clase&lt;/strong&gt;, esto
    es porque si se hace de otra manera, los métodos que implementan los
    descriptores pueden generar &lt;strong&gt;comportamientos extraños&lt;/strong&gt;. Por
    ejemplo, si se coloca dentro del &lt;em&gt;__init__()&lt;/em&gt;, el descriptor,
    pasa a ser un &lt;strong&gt;atributo de la instancia&lt;/strong&gt; y retornará el valor que
    tiene como atributo de instancia, es decir, una instancia de la
    clase del descriptor, y no el valor que retorna el &lt;em&gt;__get__()&lt;/em&gt;
    del descriptor.&lt;/li&gt;
&lt;li&gt;La segunda es que se utiliza un diccionario para almacenar asignar y
    retornar valores al descriptor, esto es porque al ser utilizados
    como &lt;strong&gt;atributos de clase&lt;/strong&gt;, estos se instancian &lt;strong&gt;sólo&lt;/strong&gt; una vez,
    es decir, se tiene sólo &lt;strong&gt;una referencia&lt;/strong&gt; a esos objetos, por lo
    que todas las instancias de &lt;em&gt;Book&lt;/em&gt;, comparten las mismas instancias
    de los respectivos descriptores, entonces, si se almacena el valor
    directamente en el descriptor, siempre obtendremos el &lt;strong&gt;último valor
    asignado&lt;/strong&gt; para ese campo en alguna instancia de &lt;em&gt;Book&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Espero haber ayudado a mejorar un poco sus prácticas de programación (o
al menos las mías), si te parece que lo que escribo es útil, te invito
suscribirte a mi lista de correos en la caja que está a la derecha,
tengo varios proyectos en mente que estaré anunciando por esa vía y que
quizás te podrían interesar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aprender a usar descriptores no sólo hace nuestro set de herramientas
más grande, genera un entendimiento más profundo de cómo funciona
Python y ayuda a apreciar la elegancia de su diseño. - Raymond
Hettinger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Muchas gracias por leerme, no olviden suscribirse y seguirme, estaré
publicando más cosas sobre desarrollo y programación por esas vías.&lt;/p&gt;</content><category term="Español"></category><category term="python"></category><category term="programación"></category><category term="descriptores"></category></entry><entry><title>Usando Redis como backend de sesiones en php</title><link href="//iffm.me/usando-redis-como-backend-de-sesiones-en-php.html" rel="alternate"></link><published>2014-10-19T00:00:00+04:00</published><updated>2014-10-19T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2014-10-19:/usando-redis-como-backend-de-sesiones-en-php.html</id><summary type="html">&lt;p&gt;Bueno, sí, leyeron bien el título, luego de años me tocó trabajar de
nuevo con php en la oficina, dejen el escándalo.&lt;/p&gt;
&lt;p&gt;Siendo sincero, las cosas parecieran haber mejorado mucho desde la
última vez que hice (o traté de hacer) algo con php, era php 4.algo en
aquel momento …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bueno, sí, leyeron bien el título, luego de años me tocó trabajar de
nuevo con php en la oficina, dejen el escándalo.&lt;/p&gt;
&lt;p&gt;Siendo sincero, las cosas parecieran haber mejorado mucho desde la
última vez que hice (o traté de hacer) algo con php, era php 4.algo en
aquel momento, jugaba con &lt;em&gt;Symfony&lt;/em&gt; y fue una desgracia que no se la
deseo ni a mi peor enemigo.&lt;/p&gt;
&lt;p&gt;Luego, más recientemente jugué con &lt;em&gt;Yii&lt;/em&gt;, un framework para desarrollo
web con php que me pareció bastante bueno y es una alternativa que le
recomiendo a todo aquel que no tenga más remedio que desarrollar usando
este lenguaje, algunos me dicen que pruebe &lt;em&gt;Lavarel&lt;/em&gt; y seguramente me
cambie a php, pero dudo mucho que algo me atrape tanto como &lt;em&gt;Python&lt;/em&gt;,
sin importar el framework, incluso &lt;em&gt;Web2Py&lt;/em&gt; tiene muchas cosas
rescatables.&lt;/p&gt;
&lt;p&gt;Bueno, manos a la obra:&lt;/p&gt;
&lt;h2&gt;La historia:&lt;/h2&gt;
&lt;p&gt;En la oficina están en una onda de &lt;em&gt;intercambiar código&lt;/em&gt; con nuestros
aliados comerciales o "páginas hermanas", el problema es que nosotros
desarrollamos en &lt;em&gt;Python&lt;/em&gt; + &lt;em&gt;django&lt;/em&gt; y a veces &lt;em&gt;bottle&lt;/em&gt; y todos los
demás en php.&lt;/p&gt;
&lt;p&gt;Este proyecto en particular, fue desarrollado con un framework hecho en
casa en php y es usado como una librería para autenticación utilizando
servicios de 3eros, es decir, &lt;em&gt;OAuth&lt;/em&gt;. Esto en un mundo ideal, donde
todo lo programas con php y puedes simplemente hacer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;use project\module\submodule\file;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;y todo bien.&lt;/p&gt;
&lt;h2&gt;El problema:&lt;/h2&gt;
&lt;p&gt;Obviamente, no podemos importar código php en nuestro proyecto en
&lt;em&gt;Python&lt;/em&gt;, entonces, la solución fue simplemente, adaptar la librería
provista por la otra gente para usarla como un servicio, la cosa salió
bastante bien, pero al momento de poner todo en producción, nos dimos
cuenta de algo.&lt;/p&gt;
&lt;p&gt;Se desplegaron dos instancias de este servicio detrás de un balanceador
de carga, para autenticar usando &lt;em&gt;OAuth&lt;/em&gt;, es necesario golpear más de
una vez el servicio, entonces, estando dos (o más) instancias detrás de
un balanceador de carga, no tienes manera de garantizar que quien
atiende el primer &lt;em&gt;request&lt;/em&gt;, es el mismo que atiende el segundo.&lt;/p&gt;
&lt;p&gt;A esto súmale que se guarda cierta información en la sesión para
mantenerla durante todo el proceso de autenticación y php almacena las
variables de sesión en un archivo local del servidor.&lt;/p&gt;
&lt;h2&gt;La solución:&lt;/h2&gt;
&lt;p&gt;Sin pensarlo mucho, la solución es tener &lt;em&gt;algo&lt;/em&gt; que todas las instancias
compartan para escribir la información relacionada a las sesiones, puede
ser una base de datos &lt;em&gt;MySQL&lt;/em&gt;, un sistema de archivos compartido con
&lt;em&gt;NFS&lt;/em&gt;, lo que sea, nosotros optamos por &lt;em&gt;Redis&lt;/em&gt; porque es lo más rápido
y fácil de configurar, responde rápido porque mantiene ciertas cosas en
memoria y es difícil que pierda datos, puede pasar, pero igual es
información transitoria que no nos interesa conservar.&lt;/p&gt;
&lt;h3&gt;Implementación:&lt;/h3&gt;
&lt;p&gt;Luego de investigar unos minutos, nos dimos cuenta de que no era nada
del otro mundo, simplemente cambiar unos parámetros de configuración en
los respectivos archivos &lt;em&gt;php.ini&lt;/em&gt;, instalar un par de paquetes y listo.&lt;/p&gt;
&lt;h4&gt;Instalación de paquetes:&lt;/h4&gt;
&lt;p&gt;Descargamos
&lt;a href="https://github.com/nicolasff/phpredis"&gt;php-redis&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo aptitude install php5-dev
&lt;span class="nb"&gt;cd&lt;/span&gt; php_redis/
sudo phpize
sudo ./configure
sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;php.ini:&lt;/h4&gt;
&lt;p&gt;Simplemente debemos modificar las siguientes líneas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tcp://localhost:6379&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;save_path&lt;/em&gt; debe tener la IP y el Puerto donde nuestra instancia de
redis estará escuchando.&lt;/p&gt;
&lt;h2&gt;Conclusión:&lt;/h2&gt;
&lt;p&gt;Ciertamente las cosas han mejorado sólo un poco en php desde la última
vez que lo usé para algo más que un proyecto de juguete. Sin embargo no
me veo programando en php a menos que sea estrictamente necesario por
las características o restricciones de un proyecto en particular.&lt;/p&gt;
&lt;p&gt;Respecto al servicio de autenticación, ya está en producción, pareciera
estar funcionando bastante bien, sin embargo hay muchas cosas con las
que no estamos contentos, seguramente terminemos cambiándolo por una
versión 2.0, seguramente en &lt;em&gt;Python&lt;/em&gt; y desarrollado por nosotros pero,
al menos por ahora, funciona y hace el trabajo.&lt;/p&gt;</content><category term="Español"></category><category term="programación"></category><category term="redis"></category><category term="web"></category><category term="php"></category></entry><entry><title>Testing: la etapa olvidada.</title><link href="//iffm.me/testing-la-etapa-olvidada.html" rel="alternate"></link><published>2012-07-19T00:00:00+04:00</published><updated>2012-07-19T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2012-07-19:/testing-la-etapa-olvidada.html</id><summary type="html">&lt;p&gt;by &lt;a href="author/israel-fermin-montilla.html"&gt;Israel Fermín Montilla&lt;/a&gt; on Thu
19 Jul, 2012&lt;/p&gt;
&lt;p&gt;En esta oportunidad, vengo a hablarles de una etapa del desarrollo que
suele ser olvidada y marginada por la mayoría de los desarrolladores que
conozco: las pruebas. En &lt;a href="http://zava.com.ve"&gt;Zava&lt;/a&gt;,
la compañía en la que trabajo actualmente, llevamos un
tiempo hablando acerca …&lt;/p&gt;</summary><content type="html">&lt;p&gt;by &lt;a href="author/israel-fermin-montilla.html"&gt;Israel Fermín Montilla&lt;/a&gt; on Thu
19 Jul, 2012&lt;/p&gt;
&lt;p&gt;En esta oportunidad, vengo a hablarles de una etapa del desarrollo que
suele ser olvidada y marginada por la mayoría de los desarrolladores que
conozco: las pruebas. En &lt;a href="http://zava.com.ve"&gt;Zava&lt;/a&gt;,
la compañía en la que trabajo actualmente, llevamos un
tiempo hablando acerca de
usar &lt;a href="http://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas"&gt;TDD&lt;/a&gt;
(Test Driven Development o Desarrollo Guiado por Pruebas)
como metodología de desarrollo, en esta metodología, las pruebas
unitarias juegan un papel principal, incluso hasta protagónico, pues son
el motor del desarrollo del proyecto. Aún cuando no es oficial el hecho
de que desarrollaremos utilizando esta metodología, personalmente me
tomé en serio el hecho de probar suerte ejecutando mis tareas de
programación guiadas por pruebas. En general, el flujo de trabajo en TDD
es el siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Elegir un requerimiento: &lt;/strong&gt;dependiendo de la metodología de
    gestión de proyecto, será distinto este proceso, en nuestro caso,
    implementamos una versión modificada de SCRUM, por lo que lo primero
    que se hace es tomar uno de los requerimientos seleccionados para el
    sprint que está en desarrollo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escribir las pruebas unitarias: &lt;/strong&gt;normalmente, el requerimiento
    tiene unas características que deben ser cumplidas, estas pruebas
    deben asegurarse de que dichas condiciones sean cumplidas. Es decir,
    una pieza de código lleva el programa de un estado A, a un estado B,
    la prueba deba asegurarse de que el estado B sea
    alcanzado completamente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escribir la implementación: &lt;/strong&gt;lógicamente, si ejecutamos las
    pruebas sin la implementación, todas van a fallar. En este paso "se
    le pone carne al esqueleto", es decir, de le agrega cuerpo a las
    funcionalidades cuyas pruebas fueron escritas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ejecutar las pruebas automatizadas: &lt;/strong&gt;una vez codificado, se
    corren las pruebas y se realizan ajustas hasta asegurarse de que
    todas las pruebas pasan de manera satisfactoria.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactor: &lt;/strong&gt;se realizan ajustes para eliminar la duplicación,
    reducir el acoplamiento y aumentar la cohesión.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actualizar la lista de requerimientos: &lt;/strong&gt;se marca el requerimiento
    como terminado.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usualmente el proceso de desarrollo se lleva a cabo al revés, es decir,
primero se escribe la funcionalidad y luego se prueba. El problema de
este enfoque es el siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Muchas veces por cuestiones de tiempo y prisa por entregar,
    simplemente se codifica la funcionalidad y se prueba de manera
    empírica y no se deja alguna garantía de que esa pieza de software
    funciona de manera correcta.&lt;/li&gt;
&lt;li&gt;No se validan todos los casos de prueba, ya sea que se pruebe
    utilizando la funcionalidad o escribiendo pruebas unitarias una vez
    codificada la pieza que se desea probar.&lt;/li&gt;
&lt;li&gt;Quien codifica la funcionalidad sabe lo que está bien y lo que está
    mal y, por la prisa de entregar, no validará los casos en los que
    sabe que falla pues, dependiendo de la metodología, cuando algo
    falle puede retomarse por mantenimiento y bug-fixing.&lt;/li&gt;
&lt;li&gt;En equipos de desarrollo pequeños, es el mismo desarrollador quien
    escribe las pruebas y si la carga de trabajo es muy alta, no se
    prueba de manera correcta.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Personalmente me ha ocurrido que al desarrollar primero y escribir las
pruebas después, termino validando únicamente mis casos base, que es lo
que debería ocurrir la mayor parte del tiempo, pero los casos borde
quedan sin ser validados y, cuando llega el momento en que algún usuario
cae dentro de estos casos y el software falla, debo volver sobre esa
funcionalidad que, usualmente, está poco documentada (la documentación
es otra de las etapas olvidadas por nosotros los desarrolladores), la
escribí hace algún tiempo y no recuerdo bien cuál fue la lógica o, peor
aún, la escribió otro desarrollador y no tengo ni la más remota idea de
qué fue lo que hizo y, además, tengo otras cosas que hacer en el
momento, por lo que simplemente terminaba escribiendo un parche
específico para validar lo que estaba ocurriendo en el momento y
solventar el problema particular. Si existía más de un caso borde sin
validar, este proceso se podía repetir N veces. En el poco tiempo que
tengo probando seguir el esquema que propone TDD, mi manera de
enfrentarme a los problemas de desarrollo ha experimentado varios
cambios y he visto las siguientes ventajas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El escribir las pruebas primero, requiere que tenga muy claro el
    requerimiento y las condiciones que deben ser satisfechas, por lo
    tanto, empiezo a codificar la funcionalidad con una idea más clara
    de lo que debo hacer.&lt;/li&gt;
&lt;li&gt;A medida que voy escribiendo las pruebas unitarias y validando los
    casos de prueba, surgen casos borde que, quizás, al principio no
    había considerado. Al final, tengo una validación completa de mi
    código y una mayor seguridad en que lo que hice está bien
    y funciona.&lt;/li&gt;
&lt;li&gt;Al desarrollar la funcionalidad como tal con una idea más clara de
    lo que cubre el requerimiento, puedo separar el código en módulos
    que ejecuten cada uno de los pasos necesarios para cubrirlo de
    manera satisfactoria.&lt;/li&gt;
&lt;li&gt;Al tener todos los casos de prueba definidos y, con ello, el
    requerimiento bien claro y definido, no escribo código de más,
    simplemente me concentro en cubrir la funcionalidad y todo el código
    que escribí se utiliza para ello.&lt;/li&gt;
&lt;li&gt;La cantidad de bugs en el código que produzco ha
    reducido considerablemente.&lt;/li&gt;
&lt;li&gt;A la hora de alguna falla, las mismas pruebas me ayudan a cercar
    el error.&lt;/li&gt;
&lt;li&gt;Si agrego código que rompe una funcionalidad previa, las mismas
    pruebas me indican qué está fallando y dónde, por lo que puedo hacer
    refactor inmediatamente y  hacer mis módulos más ortogonales
    entre sí.&lt;/li&gt;
&lt;li&gt;Si otro desarrollador debe utilizar lo que yo desarrollé, el código
    lo entrego con una garantía de que lo que hace, lo hace bien.&lt;/li&gt;
&lt;li&gt;Cumplo con todas las etapas del desarrollo de software y ninguna
    queda incompleta.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En lo personal, la manera de trabajar que propone TDD me ha funcionado
bastante bien, la única desventaja fue que al inicio de mi experimento
no tenía mucha experiencia con frameworks o librerías para el desarrollo
de pruebas, más allá de algunas pruebas unitarias que hice durante la
universidad en los cursos de Ingeniería del Software utilizando JUnit en
Java, por lo que debí cubrir una curva de aprendizaje. Una vez hecho
esto, todo fluyó mucho más rápido y siento que soy más productivo.
Trataré de publicar un par de tutoriales de las herramientas que he
usado recientemente para ver si motivo a alguien más a utilizarlas y a
tomar un poco más en serio las pruebas de software pues, aunque en la
universidad las mencionan como una etapa importante en algunos cursos,
muy pocas personas en la calle toman realmente en serio este recurso tan
útil.&lt;/p&gt;</content><category term="Español"></category><category term="programación"></category><category term="testing"></category><category term="TDD"></category></entry><entry><title>¿Por qué aprender un nuevo lenguaje?</title><link href="//iffm.me/por-que-aprender-un-nuevo-lenguaje.html" rel="alternate"></link><published>2011-09-11T00:00:00+04:00</published><updated>2011-09-11T00:00:00+04:00</updated><author><name>Israel Fermín Montilla</name></author><id>tag:iffm.me,2011-09-11:/por-que-aprender-un-nuevo-lenguaje.html</id><summary type="html">&lt;p&gt;Java, C, C#, ,C++, PHP, Perl, Ruby, SQL, SmallTalk, Erlang, Python,
Haskell... Existen muchísimos lenguajes de programación, cada uno con
sus fortalezas y debilidades, ya aprendí Java en la Universidad, también
C, he hecho uno que otro proyecto web en PHP, "¡con JQuery y todo!".
¿Por qué debería aprender un …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Java, C, C#, ,C++, PHP, Perl, Ruby, SQL, SmallTalk, Erlang, Python,
Haskell... Existen muchísimos lenguajes de programación, cada uno con
sus fortalezas y debilidades, ya aprendí Java en la Universidad, también
C, he hecho uno que otro proyecto web en PHP, "¡con JQuery y todo!".
¿Por qué debería aprender un lenguaje nuevo?, todos hacen lo mismo al
final, ¿o no?.&lt;/p&gt;
&lt;p&gt;Ciertamente, lo que puedes hacer en Java, puedes hacerlo en C# o C++,
por ejemplo. De igual manera, lo que puedes hacer utilizando PHP, puedes
hacerlo programando en Ruby o en Perl o en Python. El detalle está en
que al pasar mucho tiempo programando en un mismo lenguaje, dejamos de
ser programadores y empezamos a convertirnos en "usuarios de un
lenguaje", y pretendemos solucionar todo utilizándolo, aún cuando,
quizás, existe una herramienta que nos permitiría hacer exactamente lo
mismo, pero con la mitad del esfuerzo y la cuarta parte de las líneas de
código. Debo dejar claro que "Qué tan buén programador eres" no es algo
que se mida por la cantidad de lenguajes que sabes o, al menos, conoces
y en los que puedes defenderte, sino en la capacidad que tengas de
seleccionar el que más se adapte a la solución del problema que tienes
en frente actualmente y en tu habilidad de llevar conceptos de un
lenguaje a otro sin mucho problema.&lt;/p&gt;
&lt;p&gt;Siempre he dicho que sólo hay una cosa peor que un mal programador, y es
un programador que sólo conoce un lenguaje y no es capaz de adaptarse a
nuevas herramientas. A la hora de desarrollar un sistema, siempre es
deseable tener un repertorio amplio de opciones para seleccionar la
herramienta que más nos guste para atacarlo y empezar a programar.
Muchas veces, las mismas características del problema nos obligan a
trabajar con una herramienta, por ejemplo, si vamos a desarrollar un
driver para una impresora o una tarjeta de sonido, no hay más opción que
C. Pero si el problema es más flexible, tenemos una gama más ámplia de
pinturas para empezar a colorear nuestra obra de arte. Si es web, puede
que salga bien con PHP, ¿por qué no usar un Framework para hacernos la
vida más fácil?: PHP + Symfony o Python + Django o Web2py, Perl +
Catalyst (¿alguien?), si es una aplicación de escritorio, ¿por qué no
utilizar Java?, o quizás Python + PyGTK o PyQt. Nuevas herramientas y
nuevas maneras de hacer las cosas, si las entendemos y las asimilamos de
manera correcta, nos hacen mejores programadores, uno como
desarrollador, debe ser curioso y no sólo aprender a utilizar la
herramienta, también explorarla y ver realmente cómo funciona por
dentro. Sólo así, sabremos cuán óptima y realmente qué tan buena es
dicha herramienta.&lt;/p&gt;</content><category term="Español"></category><category term="programación"></category><category term="lenguajes"></category><category term="carrera"></category></entry></feed>